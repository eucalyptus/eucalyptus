/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.eucalyptus.portal.workflow;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class InstanceLogActivitiesClientImpl extends ActivitiesClientBase implements InstanceLogActivitiesClient {

	public InstanceLogActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public InstanceLogActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public InstanceLogActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> distributeEvents(String globalQueue) {
        return distributeEventsImpl(Promise.asPromise(globalQueue), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> distributeEvents(String globalQueue, Promise<?>... waitFor) {
        return distributeEventsImpl(Promise.asPromise(globalQueue), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> distributeEvents(String globalQueue, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return distributeEventsImpl(Promise.asPromise(globalQueue), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> distributeEvents(Promise<String> globalQueue) {
        return distributeEventsImpl(globalQueue, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> distributeEvents(Promise<String> globalQueue, Promise<?>... waitFor) {
        return distributeEventsImpl(globalQueue, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> distributeEvents(Promise<String> globalQueue, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return distributeEventsImpl(globalQueue, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.Map<java.lang.String,java.lang.String>> distributeEventsImpl(final Promise<String> globalQueue, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("InstanceLogActivities.distributeEvents");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[1];
        _input_[0] = globalQueue;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.Map.class, waitFor);
    }

    @Override
    public final Promise<Void> persist(String accountId, String queueName) {
        return persistImpl(Promise.asPromise(accountId), Promise.asPromise(queueName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> persist(String accountId, String queueName, Promise<?>... waitFor) {
        return persistImpl(Promise.asPromise(accountId), Promise.asPromise(queueName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> persist(String accountId, String queueName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return persistImpl(Promise.asPromise(accountId), Promise.asPromise(queueName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> persist(Promise<String> accountId, Promise<String> queueName) {
        return persistImpl(accountId, queueName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> persist(Promise<String> accountId, Promise<String> queueName, Promise<?>... waitFor) {
        return persistImpl(accountId, queueName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> persist(Promise<String> accountId, Promise<String> queueName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return persistImpl(accountId, queueName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> persistImpl(final Promise<String> accountId, final Promise<String> queueName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("InstanceLogActivities.persist");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountId;
        _input_[1] = queueName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteQueues(java.util.List<java.lang.String> queues) {
        return deleteQueuesImpl(Promise.asPromise(queues), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteQueues(java.util.List<java.lang.String> queues, Promise<?>... waitFor) {
        return deleteQueuesImpl(Promise.asPromise(queues), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteQueues(java.util.List<java.lang.String> queues, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteQueuesImpl(Promise.asPromise(queues), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteQueues(Promise<java.util.List<java.lang.String>> queues) {
        return deleteQueuesImpl(queues, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteQueues(Promise<java.util.List<java.lang.String>> queues, Promise<?>... waitFor) {
        return deleteQueuesImpl(queues, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteQueues(Promise<java.util.List<java.lang.String>> queues, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteQueuesImpl(queues, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteQueuesImpl(final Promise<java.util.List<java.lang.String>> queues, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("InstanceLogActivities.deleteQueues");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[1];
        _input_[0] = queues;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> cleanupQueues() {
        return cleanupQueuesImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> cleanupQueues(Promise<?>... waitFor) {
        return cleanupQueuesImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> cleanupQueues(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return cleanupQueuesImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> cleanupQueuesImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("InstanceLogActivities.cleanupQueues");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

}