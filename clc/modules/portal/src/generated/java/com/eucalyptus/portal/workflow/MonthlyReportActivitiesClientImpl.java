/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.eucalyptus.portal.workflow;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class MonthlyReportActivitiesClientImpl extends ActivitiesClientBase implements MonthlyReportActivitiesClient {

	public MonthlyReportActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public MonthlyReportActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public MonthlyReportActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<java.util.List<java.lang.String>> listCandidateAccounts() {
        return listCandidateAccountsImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> listCandidateAccounts(Promise<?>... waitFor) {
        return listCandidateAccountsImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> listCandidateAccounts(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return listCandidateAccountsImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.List<java.lang.String>> listCandidateAccountsImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("MonthlyReportActivities.listCandidateAccounts");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.List.class, waitFor);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> queryMonthlyAwsUsage(String accountId, String service, String year, String month, java.util.Date end) {
        return queryMonthlyAwsUsageImpl(Promise.asPromise(accountId), Promise.asPromise(service), Promise.asPromise(year), Promise.asPromise(month), Promise.asPromise(end), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> queryMonthlyAwsUsage(String accountId, String service, String year, String month, java.util.Date end, Promise<?>... waitFor) {
        return queryMonthlyAwsUsageImpl(Promise.asPromise(accountId), Promise.asPromise(service), Promise.asPromise(year), Promise.asPromise(month), Promise.asPromise(end), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> queryMonthlyAwsUsage(String accountId, String service, String year, String month, java.util.Date end, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return queryMonthlyAwsUsageImpl(Promise.asPromise(accountId), Promise.asPromise(service), Promise.asPromise(year), Promise.asPromise(month), Promise.asPromise(end), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> queryMonthlyAwsUsage(Promise<String> accountId, Promise<String> service, Promise<String> year, Promise<String> month, Promise<java.util.Date> end) {
        return queryMonthlyAwsUsageImpl(accountId, service, year, month, end, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> queryMonthlyAwsUsage(Promise<String> accountId, Promise<String> service, Promise<String> year, Promise<String> month, Promise<java.util.Date> end, Promise<?>... waitFor) {
        return queryMonthlyAwsUsageImpl(accountId, service, year, month, end, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> queryMonthlyAwsUsage(Promise<String> accountId, Promise<String> service, Promise<String> year, Promise<String> month, Promise<java.util.Date> end, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return queryMonthlyAwsUsageImpl(accountId, service, year, month, end, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> queryMonthlyAwsUsageImpl(final Promise<String> accountId, final Promise<String> service, final Promise<String> year, final Promise<String> month, final Promise<java.util.Date> end, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("MonthlyReportActivities.queryMonthlyAwsUsage");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[5];
        _input_[0] = accountId;
        _input_[1] = service;
        _input_[2] = year;
        _input_[3] = month;
        _input_[4] = end;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.List.class, waitFor);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> transform(java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord> awsUsage) {
        return transformImpl(Promise.asPromise(awsUsage), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> transform(java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord> awsUsage, Promise<?>... waitFor) {
        return transformImpl(Promise.asPromise(awsUsage), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> transform(java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord> awsUsage, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return transformImpl(Promise.asPromise(awsUsage), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> transform(Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> awsUsage) {
        return transformImpl(awsUsage, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> transform(Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> awsUsage, Promise<?>... waitFor) {
        return transformImpl(awsUsage, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> transform(Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> awsUsage, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return transformImpl(awsUsage, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> transformImpl(final Promise<java.util.List<com.eucalyptus.portal.workflow.AwsUsageRecord>> awsUsage, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("MonthlyReportActivities.transform");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[1];
        _input_[0] = awsUsage;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.List.class, waitFor);
    }

    @Override
    public final Promise<Void> persist(String accountId, String year, String month, java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord> monthly) {
        return persistImpl(Promise.asPromise(accountId), Promise.asPromise(year), Promise.asPromise(month), Promise.asPromise(monthly), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> persist(String accountId, String year, String month, java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord> monthly, Promise<?>... waitFor) {
        return persistImpl(Promise.asPromise(accountId), Promise.asPromise(year), Promise.asPromise(month), Promise.asPromise(monthly), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> persist(String accountId, String year, String month, java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord> monthly, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return persistImpl(Promise.asPromise(accountId), Promise.asPromise(year), Promise.asPromise(month), Promise.asPromise(monthly), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> persist(Promise<String> accountId, Promise<String> year, Promise<String> month, Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> monthly) {
        return persistImpl(accountId, year, month, monthly, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> persist(Promise<String> accountId, Promise<String> year, Promise<String> month, Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> monthly, Promise<?>... waitFor) {
        return persistImpl(accountId, year, month, monthly, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> persist(Promise<String> accountId, Promise<String> year, Promise<String> month, Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> monthly, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return persistImpl(accountId, year, month, monthly, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> persistImpl(final Promise<String> accountId, final Promise<String> year, final Promise<String> month, final Promise<java.util.List<com.eucalyptus.portal.workflow.MonthlyUsageRecord>> monthly, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("MonthlyReportActivities.persist");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[4];
        _input_[0] = accountId;
        _input_[1] = year;
        _input_[2] = month;
        _input_[3] = monthly;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> uploadToS3Bucket(String accountId, String year, String month) {
        return uploadToS3BucketImpl(Promise.asPromise(accountId), Promise.asPromise(year), Promise.asPromise(month), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> uploadToS3Bucket(String accountId, String year, String month, Promise<?>... waitFor) {
        return uploadToS3BucketImpl(Promise.asPromise(accountId), Promise.asPromise(year), Promise.asPromise(month), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> uploadToS3Bucket(String accountId, String year, String month, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return uploadToS3BucketImpl(Promise.asPromise(accountId), Promise.asPromise(year), Promise.asPromise(month), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> uploadToS3Bucket(Promise<String> accountId, Promise<String> year, Promise<String> month) {
        return uploadToS3BucketImpl(accountId, year, month, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> uploadToS3Bucket(Promise<String> accountId, Promise<String> year, Promise<String> month, Promise<?>... waitFor) {
        return uploadToS3BucketImpl(accountId, year, month, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> uploadToS3Bucket(Promise<String> accountId, Promise<String> year, Promise<String> month, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return uploadToS3BucketImpl(accountId, year, month, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> uploadToS3BucketImpl(final Promise<String> accountId, final Promise<String> year, final Promise<String> month, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("MonthlyReportActivities.uploadToS3Bucket");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountId;
        _input_[1] = year;
        _input_[2] = month;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

}