/*************************************************************************
 * Copyright 2008 Regents of the University of California
 * Copyright 2009-2015 Ent. Services Development Corporation LP
 *
 * Redistribution and use of this software in source and binary forms,
 * with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer
 *   in the documentation and/or other materials provided with the
 *   distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE. USERS OF THIS SOFTWARE ACKNOWLEDGE
 * THE POSSIBLE PRESENCE OF OTHER OPEN SOURCE LICENSED MATERIAL,
 * COPYRIGHTED MATERIAL OR PATENTED MATERIAL IN THIS SOFTWARE,
 * AND IF ANY SUCH MATERIAL IS DISCOVERED THE PARTY DISCOVERING
 * IT MAY INFORM DR. RICH WOLSKI AT THE UNIVERSITY OF CALIFORNIA,
 * SANTA BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY,
 * WHICH IN THE REGENTS' DISCRETION MAY INCLUDE, WITHOUT LIMITATION,
 * REPLACEMENT OF THE CODE SO IDENTIFIED, LICENSING OF THE CODE SO
 * IDENTIFIED, OR WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT
 * NEEDED TO COMPLY WITH ANY SUCH LICENSES OR RIGHTS.
 ************************************************************************/
package com.eucalyptus.entities;

import java.io.Serializable;
import java.util.Date;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;
import org.hibernate.annotations.GenericGenerator;
import com.eucalyptus.util.HasNaturalId;

/**
 *
 */
@MappedSuperclass
public class AbstractPersistent implements Serializable, HasNaturalId {
  private static final long serialVersionUID = 1;

  @Id
  @GeneratedValue(generator = "system-uuid")
  @GenericGenerator(name="system-uuid", strategy = "uuid")
  @Column( name = "id" )
  String id;
  @Version
  @Column(name = "version")
  Integer version;
  @Temporal( TemporalType.TIMESTAMP)
  @Column(name = "creation_timestamp")
  Date creationTimestamp;
  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "last_update_timestamp")
  Date lastUpdateTimestamp;
  @Column( name = "metadata_perm_uuid", unique = true, updatable = false, nullable = false )
  private String   naturalId;

  public AbstractPersistent( ) {
    super( );
  }

  @Override
  public int hashCode( ) {
    final int prime = 31;
    int result = 1;
    result = prime * result + ( ( id == null ) ? 0 : id.hashCode( ) );
    return result;
  }

  @Override
  public boolean equals( Object obj ) {
    if ( this == obj ) return true;
    if ( obj == null ) return false;
    if ( getClass( ) != obj.getClass( ) ) return false;
    AbstractPersistent other = ( AbstractPersistent ) obj;
    if ( this.naturalId == null ) {
      return other.naturalId != null;
    } else if ( !naturalId.equals( other.naturalId ) ) {
      return false;
    } else {
      return true;
    }
  }

  @PreUpdate
  @PrePersist
  public void updateTimeStamps() {
    lastUpdateTimestamp = new Date();
    if ( creationTimestamp == null ) {
      this.creationTimestamp = new Date();
    }
    if ( this.naturalId == null ) {
      this.naturalId = UUID.randomUUID( ).toString( );
    }
  }

  @Override
  public String getNaturalId( ) {
    return this.naturalId;
  }

  protected void setNaturalId( String naturalId ) {
    this.naturalId = naturalId;
  }

  /**
   * NOTE:IMPORTANT: this value is controlled by the persistence layer/db and should not be relied for stability or references outside the database.  For example, it should not be the identifier for users to refer to the object.
   * @return autogenerated entity identifier
   */
  protected final String getId( ) {
    return this.id;
  }

  protected void setId( final String id ) {
    this.id = id;
  }

  public Integer getVersion() {
    return version;
  }

  public void setVersion( final Integer version ) {
    this.version = version;
  }

  public Date getCreationTimestamp() {
    return creationTimestamp;
  }

  public void setCreationTimestamp( final Date creationTimestamp ) {
    this.creationTimestamp = creationTimestamp;
  }

  public Date getLastUpdateTimestamp() {
    return lastUpdateTimestamp;
  }

  public void setLastUpdateTimestamp( final Date lastUpdateTimestamp ) {
    this.lastUpdateTimestamp = lastUpdateTimestamp;
  }

  public long lastUpdateMillis( ) {
    return System.currentTimeMillis( ) - ( this.getLastUpdateTimestamp( ) != null ? this.getLastUpdateTimestamp( ).getTime( ) : 0L );
  }

  /**
   * Clear low level persistent state.
   *
   * This useful for entities that may later be persisted with a new identity.
   */
  protected void resetPersistence() {
    this.id = null;
    this.version = null;
    this.lastUpdateTimestamp = null;
    this.creationTimestamp = null;
  }

}

