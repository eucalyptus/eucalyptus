/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.eucalyptus.loadbalancing.workflow;

import com.amazonaws.services.simpleworkflow.flow.core.AndPromise;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.core.Task;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.StartWorkflowOptions;
import com.amazonaws.services.simpleworkflow.flow.WorkflowSelfClientBase;
import com.amazonaws.services.simpleworkflow.flow.generic.ContinueAsNewWorkflowExecutionParameters;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericWorkflowClient;

public class ModifyLoadBalancerAttributesWorkflowSelfClientImpl extends WorkflowSelfClientBase implements ModifyLoadBalancerAttributesWorkflowSelfClient {

    public ModifyLoadBalancerAttributesWorkflowSelfClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public ModifyLoadBalancerAttributesWorkflowSelfClientImpl(GenericWorkflowClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public ModifyLoadBalancerAttributesWorkflowSelfClientImpl(GenericWorkflowClient genericClient, 
            DataConverter dataConverter, StartWorkflowOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }

    @Override
    public final void modifyLoadBalancerAttributes(String accountNumber, String loadbalancer, com.eucalyptus.loadbalancing.common.msgs.LoadBalancerAttributes attributes) { 
        modifyLoadBalancerAttributesImpl(Promise.asPromise(accountNumber), Promise.asPromise(loadbalancer), Promise.asPromise(attributes), (StartWorkflowOptions)null);
    }

    @Override
    public final void modifyLoadBalancerAttributes(String accountNumber, String loadbalancer, com.eucalyptus.loadbalancing.common.msgs.LoadBalancerAttributes attributes, Promise<?>... waitFor) { 
        modifyLoadBalancerAttributesImpl(Promise.asPromise(accountNumber), Promise.asPromise(loadbalancer), Promise.asPromise(attributes), (StartWorkflowOptions)null, waitFor);
    }
    
    @Override
    public final void modifyLoadBalancerAttributes(String accountNumber, String loadbalancer, com.eucalyptus.loadbalancing.common.msgs.LoadBalancerAttributes attributes, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        modifyLoadBalancerAttributesImpl(Promise.asPromise(accountNumber), Promise.asPromise(loadbalancer), Promise.asPromise(attributes), optionsOverride, waitFor);
    }
    
    @Override
    public final void modifyLoadBalancerAttributes(Promise<String> accountNumber, Promise<String> loadbalancer, Promise<com.eucalyptus.loadbalancing.common.msgs.LoadBalancerAttributes> attributes) {
        modifyLoadBalancerAttributesImpl(accountNumber, loadbalancer, attributes, (StartWorkflowOptions)null);
    }

    @Override
    public final void modifyLoadBalancerAttributes(Promise<String> accountNumber, Promise<String> loadbalancer, Promise<com.eucalyptus.loadbalancing.common.msgs.LoadBalancerAttributes> attributes, Promise<?>... waitFor) {
        modifyLoadBalancerAttributesImpl(accountNumber, loadbalancer, attributes, (StartWorkflowOptions)null, waitFor);
    }

    @Override
    public final void modifyLoadBalancerAttributes(Promise<String> accountNumber, Promise<String> loadbalancer, Promise<com.eucalyptus.loadbalancing.common.msgs.LoadBalancerAttributes> attributes, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        modifyLoadBalancerAttributesImpl(accountNumber, loadbalancer, attributes, optionsOverride, waitFor);
    }
    
    protected void modifyLoadBalancerAttributesImpl(final Promise<String> accountNumber, final Promise<String> loadbalancer, final Promise<com.eucalyptus.loadbalancing.common.msgs.LoadBalancerAttributes> attributes, final StartWorkflowOptions schedulingOptionsOverride, Promise<?>... waitFor) {
        new Task(new Promise[] { accountNumber, loadbalancer, attributes, new AndPromise(waitFor) }) {
    		@Override
			protected void doExecute() throws Throwable {
                ContinueAsNewWorkflowExecutionParameters _parameters_ = new ContinueAsNewWorkflowExecutionParameters();
                Object[] _input_ = new Object[3];
                _input_[0] = accountNumber.get();
                _input_[1] = loadbalancer.get();
                _input_[2] = attributes.get();
                String _stringInput_ = dataConverter.toData(_input_);
				_parameters_.setInput(_stringInput_);
				_parameters_ = _parameters_.createContinueAsNewParametersFromOptions(schedulingOptions, schedulingOptionsOverride);
                
                if (genericClient == null) {
                    genericClient = decisionContextProvider.getDecisionContext().getWorkflowClient();
                }
                genericClient.continueAsNewOnCompletion(_parameters_);
			}
		};
    }
}