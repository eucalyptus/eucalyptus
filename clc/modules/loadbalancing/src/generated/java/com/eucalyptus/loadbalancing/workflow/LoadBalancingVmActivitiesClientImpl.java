/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.eucalyptus.loadbalancing.workflow;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class LoadBalancingVmActivitiesClientImpl extends ActivitiesClientBase implements LoadBalancingVmActivitiesClient {

	public LoadBalancingVmActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public LoadBalancingVmActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public LoadBalancingVmActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<Void> setPolicy(String policy) {
        return setPolicyImpl(Promise.asPromise(policy), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> setPolicy(String policy, Promise<?>... waitFor) {
        return setPolicyImpl(Promise.asPromise(policy), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> setPolicy(String policy, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return setPolicyImpl(Promise.asPromise(policy), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> setPolicy(Promise<String> policy) {
        return setPolicyImpl(policy, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> setPolicy(Promise<String> policy, Promise<?>... waitFor) {
        return setPolicyImpl(policy, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> setPolicy(Promise<String> policy, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return setPolicyImpl(policy, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> setPolicyImpl(final Promise<String> policy, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingVmActivities.setPolicy");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[1];
        _input_[0] = policy;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> setLoadBalancer(String loadbalancer) {
        return setLoadBalancerImpl(Promise.asPromise(loadbalancer), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> setLoadBalancer(String loadbalancer, Promise<?>... waitFor) {
        return setLoadBalancerImpl(Promise.asPromise(loadbalancer), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> setLoadBalancer(String loadbalancer, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return setLoadBalancerImpl(Promise.asPromise(loadbalancer), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> setLoadBalancer(Promise<String> loadbalancer) {
        return setLoadBalancerImpl(loadbalancer, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> setLoadBalancer(Promise<String> loadbalancer, Promise<?>... waitFor) {
        return setLoadBalancerImpl(loadbalancer, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> setLoadBalancer(Promise<String> loadbalancer, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return setLoadBalancerImpl(loadbalancer, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> setLoadBalancerImpl(final Promise<String> loadbalancer, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingVmActivities.setLoadBalancer");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[1];
        _input_[0] = loadbalancer;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<String> getCloudWatchMetrics() {
        return getCloudWatchMetricsImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> getCloudWatchMetrics(Promise<?>... waitFor) {
        return getCloudWatchMetricsImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> getCloudWatchMetrics(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return getCloudWatchMetricsImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> getCloudWatchMetricsImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingVmActivities.getCloudWatchMetrics");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, String.class, waitFor);
    }

    @Override
    public final Promise<String> getInstanceStatus() {
        return getInstanceStatusImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> getInstanceStatus(Promise<?>... waitFor) {
        return getInstanceStatusImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> getInstanceStatus(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return getInstanceStatusImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> getInstanceStatusImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingVmActivities.getInstanceStatus");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, String.class, waitFor);
    }

}