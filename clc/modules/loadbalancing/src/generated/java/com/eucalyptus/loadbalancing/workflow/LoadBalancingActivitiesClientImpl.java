/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.eucalyptus.loadbalancing.workflow;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class LoadBalancingActivitiesClientImpl extends ActivitiesClientBase implements LoadBalancingActivitiesClient {

	public LoadBalancingActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public LoadBalancingActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public LoadBalancingActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<Boolean> createLbAdmissionControl(String accountNumber, String lbName, String[] zones) {
        return createLbAdmissionControlImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zones), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Boolean> createLbAdmissionControl(String accountNumber, String lbName, String[] zones, Promise<?>... waitFor) {
        return createLbAdmissionControlImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zones), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Boolean> createLbAdmissionControl(String accountNumber, String lbName, String[] zones, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createLbAdmissionControlImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zones), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Boolean> createLbAdmissionControl(Promise<String> accountNumber, Promise<String> lbName, Promise<String[]> zones) {
        return createLbAdmissionControlImpl(accountNumber, lbName, zones, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Boolean> createLbAdmissionControl(Promise<String> accountNumber, Promise<String> lbName, Promise<String[]> zones, Promise<?>... waitFor) {
        return createLbAdmissionControlImpl(accountNumber, lbName, zones, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Boolean> createLbAdmissionControl(Promise<String> accountNumber, Promise<String> lbName, Promise<String[]> zones, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createLbAdmissionControlImpl(accountNumber, lbName, zones, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Boolean> createLbAdmissionControlImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<String[]> zones, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createLbAdmissionControl");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = zones;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Boolean.class, waitFor);
    }

    @Override
    public final Promise<String> iamRoleSetup(String accountNumber, String lbName) {
        return iamRoleSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> iamRoleSetup(String accountNumber, String lbName, Promise<?>... waitFor) {
        return iamRoleSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> iamRoleSetup(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return iamRoleSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<String> iamRoleSetup(Promise<String> accountNumber, Promise<String> lbName) {
        return iamRoleSetupImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> iamRoleSetup(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return iamRoleSetupImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> iamRoleSetup(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return iamRoleSetupImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> iamRoleSetupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.iamRoleSetup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, String.class, waitFor);
    }

    @Override
    public final Promise<String> instanceProfileSetup(String accountNumber, String lbName, String roleName) {
        return instanceProfileSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(roleName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> instanceProfileSetup(String accountNumber, String lbName, String roleName, Promise<?>... waitFor) {
        return instanceProfileSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(roleName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> instanceProfileSetup(String accountNumber, String lbName, String roleName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return instanceProfileSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(roleName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<String> instanceProfileSetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> roleName) {
        return instanceProfileSetupImpl(accountNumber, lbName, roleName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> instanceProfileSetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> roleName, Promise<?>... waitFor) {
        return instanceProfileSetupImpl(accountNumber, lbName, roleName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> instanceProfileSetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> roleName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return instanceProfileSetupImpl(accountNumber, lbName, roleName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> instanceProfileSetupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<String> roleName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.instanceProfileSetup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = roleName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, String.class, waitFor);
    }

    @Override
    public final Promise<String> iamPolicySetup(String accountNumber, String lbName, String roleName) {
        return iamPolicySetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(roleName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> iamPolicySetup(String accountNumber, String lbName, String roleName, Promise<?>... waitFor) {
        return iamPolicySetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(roleName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> iamPolicySetup(String accountNumber, String lbName, String roleName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return iamPolicySetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(roleName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<String> iamPolicySetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> roleName) {
        return iamPolicySetupImpl(accountNumber, lbName, roleName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> iamPolicySetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> roleName, Promise<?>... waitFor) {
        return iamPolicySetupImpl(accountNumber, lbName, roleName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> iamPolicySetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> roleName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return iamPolicySetupImpl(accountNumber, lbName, roleName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> iamPolicySetupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<String> roleName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.iamPolicySetup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = roleName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, String.class, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> securityGroupSetup(String accountNumber, String lbName) {
        return securityGroupSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> securityGroupSetup(String accountNumber, String lbName, Promise<?>... waitFor) {
        return securityGroupSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> securityGroupSetup(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return securityGroupSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> securityGroupSetup(Promise<String> accountNumber, Promise<String> lbName) {
        return securityGroupSetupImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> securityGroupSetup(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return securityGroupSetupImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> securityGroupSetup(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return securityGroupSetupImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> securityGroupSetupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.securityGroupSetup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult.class, waitFor);
    }

    @Override
    public final Promise<Void> securityGroupSetupRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult result) {
        return securityGroupSetupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> securityGroupSetupRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult result, Promise<?>... waitFor) {
        return securityGroupSetupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> securityGroupSetupRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return securityGroupSetupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> securityGroupSetupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> result) {
        return securityGroupSetupRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> securityGroupSetupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> result, Promise<?>... waitFor) {
        return securityGroupSetupRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> securityGroupSetupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return securityGroupSetupRollbackImpl(accountNumber, lbName, result, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> securityGroupSetupRollbackImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.workflow.SecurityGroupSetupActivityResult> result, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.securityGroupSetupRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = result;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> createLbTagCreator(String accountNumber, String lbName, String sgroupId) {
        return createLbTagCreatorImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(sgroupId), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> createLbTagCreator(String accountNumber, String lbName, String sgroupId, Promise<?>... waitFor) {
        return createLbTagCreatorImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(sgroupId), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> createLbTagCreator(String accountNumber, String lbName, String sgroupId, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createLbTagCreatorImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(sgroupId), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> createLbTagCreator(Promise<String> accountNumber, Promise<String> lbName, Promise<String> sgroupId) {
        return createLbTagCreatorImpl(accountNumber, lbName, sgroupId, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> createLbTagCreator(Promise<String> accountNumber, Promise<String> lbName, Promise<String> sgroupId, Promise<?>... waitFor) {
        return createLbTagCreatorImpl(accountNumber, lbName, sgroupId, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> createLbTagCreator(Promise<String> accountNumber, Promise<String> lbName, Promise<String> sgroupId, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createLbTagCreatorImpl(accountNumber, lbName, sgroupId, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> createLbTagCreatorImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<String> sgroupId, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createLbTagCreator");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = sgroupId;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult.class, waitFor);
    }

    @Override
    public final Promise<Void> createLbTagCreatorRollback(com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult result) {
        return createLbTagCreatorRollbackImpl(Promise.asPromise(result), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createLbTagCreatorRollback(com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult result, Promise<?>... waitFor) {
        return createLbTagCreatorRollbackImpl(Promise.asPromise(result), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createLbTagCreatorRollback(com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createLbTagCreatorRollbackImpl(Promise.asPromise(result), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> createLbTagCreatorRollback(Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> result) {
        return createLbTagCreatorRollbackImpl(result, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createLbTagCreatorRollback(Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> result, Promise<?>... waitFor) {
        return createLbTagCreatorRollbackImpl(result, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createLbTagCreatorRollback(Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createLbTagCreatorRollbackImpl(result, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> createLbTagCreatorRollbackImpl(final Promise<com.eucalyptus.loadbalancing.workflow.CreateTagActivityResult> result, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createLbTagCreatorRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[1];
        _input_[0] = result;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> autoscalingGroupSetup(String accountNumber, String lbName, String instanceProfileName, String securityGroupName, java.util.List<java.lang.String> zones, java.util.Map<java.lang.String,java.lang.String> zoneToSubnetIdMap) {
        return autoscalingGroupSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(instanceProfileName), Promise.asPromise(securityGroupName), Promise.asPromise(zones), Promise.asPromise(zoneToSubnetIdMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> autoscalingGroupSetup(String accountNumber, String lbName, String instanceProfileName, String securityGroupName, java.util.List<java.lang.String> zones, java.util.Map<java.lang.String,java.lang.String> zoneToSubnetIdMap, Promise<?>... waitFor) {
        return autoscalingGroupSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(instanceProfileName), Promise.asPromise(securityGroupName), Promise.asPromise(zones), Promise.asPromise(zoneToSubnetIdMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> autoscalingGroupSetup(String accountNumber, String lbName, String instanceProfileName, String securityGroupName, java.util.List<java.lang.String> zones, java.util.Map<java.lang.String,java.lang.String> zoneToSubnetIdMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return autoscalingGroupSetupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(instanceProfileName), Promise.asPromise(securityGroupName), Promise.asPromise(zones), Promise.asPromise(zoneToSubnetIdMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> autoscalingGroupSetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> instanceProfileName, Promise<String> securityGroupName, Promise<java.util.List<java.lang.String>> zones, Promise<java.util.Map<java.lang.String,java.lang.String>> zoneToSubnetIdMap) {
        return autoscalingGroupSetupImpl(accountNumber, lbName, instanceProfileName, securityGroupName, zones, zoneToSubnetIdMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> autoscalingGroupSetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> instanceProfileName, Promise<String> securityGroupName, Promise<java.util.List<java.lang.String>> zones, Promise<java.util.Map<java.lang.String,java.lang.String>> zoneToSubnetIdMap, Promise<?>... waitFor) {
        return autoscalingGroupSetupImpl(accountNumber, lbName, instanceProfileName, securityGroupName, zones, zoneToSubnetIdMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> autoscalingGroupSetup(Promise<String> accountNumber, Promise<String> lbName, Promise<String> instanceProfileName, Promise<String> securityGroupName, Promise<java.util.List<java.lang.String>> zones, Promise<java.util.Map<java.lang.String,java.lang.String>> zoneToSubnetIdMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return autoscalingGroupSetupImpl(accountNumber, lbName, instanceProfileName, securityGroupName, zones, zoneToSubnetIdMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> autoscalingGroupSetupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<String> instanceProfileName, final Promise<String> securityGroupName, final Promise<java.util.List<java.lang.String>> zones, final Promise<java.util.Map<java.lang.String,java.lang.String>> zoneToSubnetIdMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.autoscalingGroupSetup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[6];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = instanceProfileName;
        _input_[3] = securityGroupName;
        _input_[4] = zones;
        _input_[5] = zoneToSubnetIdMap;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult.class, waitFor);
    }

    @Override
    public final Promise<Void> autoscalingGroupSetupRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult result) {
        return autoscalingGroupSetupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> autoscalingGroupSetupRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult result, Promise<?>... waitFor) {
        return autoscalingGroupSetupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> autoscalingGroupSetupRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return autoscalingGroupSetupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> autoscalingGroupSetupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> result) {
        return autoscalingGroupSetupRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> autoscalingGroupSetupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> result, Promise<?>... waitFor) {
        return autoscalingGroupSetupRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> autoscalingGroupSetupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return autoscalingGroupSetupRollbackImpl(accountNumber, lbName, result, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> autoscalingGroupSetupRollbackImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.workflow.AutoscalingGroupSetupActivityResult> result, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.autoscalingGroupSetupRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = result;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> enableAvailabilityZonesPersistUpdatedZones(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToEnable, java.util.Map<java.lang.String,java.lang.String> zoneToSubnetIdMap) {
        return enableAvailabilityZonesPersistUpdatedZonesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToEnable), Promise.asPromise(zoneToSubnetIdMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> enableAvailabilityZonesPersistUpdatedZones(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToEnable, java.util.Map<java.lang.String,java.lang.String> zoneToSubnetIdMap, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistUpdatedZonesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToEnable), Promise.asPromise(zoneToSubnetIdMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> enableAvailabilityZonesPersistUpdatedZones(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToEnable, java.util.Map<java.lang.String,java.lang.String> zoneToSubnetIdMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistUpdatedZonesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToEnable), Promise.asPromise(zoneToSubnetIdMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> enableAvailabilityZonesPersistUpdatedZones(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToEnable, Promise<java.util.Map<java.lang.String,java.lang.String>> zoneToSubnetIdMap) {
        return enableAvailabilityZonesPersistUpdatedZonesImpl(accountNumber, lbName, zonesToEnable, zoneToSubnetIdMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> enableAvailabilityZonesPersistUpdatedZones(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToEnable, Promise<java.util.Map<java.lang.String,java.lang.String>> zoneToSubnetIdMap, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistUpdatedZonesImpl(accountNumber, lbName, zonesToEnable, zoneToSubnetIdMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> enableAvailabilityZonesPersistUpdatedZones(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToEnable, Promise<java.util.Map<java.lang.String,java.lang.String>> zoneToSubnetIdMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistUpdatedZonesImpl(accountNumber, lbName, zonesToEnable, zoneToSubnetIdMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.List<java.lang.String>> enableAvailabilityZonesPersistUpdatedZonesImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> zonesToEnable, final Promise<java.util.Map<java.lang.String,java.lang.String>> zoneToSubnetIdMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.enableAvailabilityZonesPersistUpdatedZones");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[4];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = zonesToEnable;
        _input_[3] = zoneToSubnetIdMap;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.List.class, waitFor);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistUpdatedZonesRollback(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToRollback) {
        return enableAvailabilityZonesPersistUpdatedZonesRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToRollback), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistUpdatedZonesRollback(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToRollback, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistUpdatedZonesRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToRollback), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistUpdatedZonesRollback(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToRollback, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistUpdatedZonesRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToRollback), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistUpdatedZonesRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToRollback) {
        return enableAvailabilityZonesPersistUpdatedZonesRollbackImpl(accountNumber, lbName, zonesToRollback, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistUpdatedZonesRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToRollback, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistUpdatedZonesRollbackImpl(accountNumber, lbName, zonesToRollback, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistUpdatedZonesRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToRollback, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistUpdatedZonesRollbackImpl(accountNumber, lbName, zonesToRollback, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> enableAvailabilityZonesPersistUpdatedZonesRollbackImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> zonesToRollback, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.enableAvailabilityZonesPersistUpdatedZonesRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = zonesToRollback;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistBackendInstanceState(String accountNumber, String lbName, java.util.List<java.lang.String> enabledZones) {
        return enableAvailabilityZonesPersistBackendInstanceStateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(enabledZones), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistBackendInstanceState(String accountNumber, String lbName, java.util.List<java.lang.String> enabledZones, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistBackendInstanceStateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(enabledZones), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistBackendInstanceState(String accountNumber, String lbName, java.util.List<java.lang.String> enabledZones, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistBackendInstanceStateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(enabledZones), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistBackendInstanceState(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> enabledZones) {
        return enableAvailabilityZonesPersistBackendInstanceStateImpl(accountNumber, lbName, enabledZones, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistBackendInstanceState(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> enabledZones, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistBackendInstanceStateImpl(accountNumber, lbName, enabledZones, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> enableAvailabilityZonesPersistBackendInstanceState(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> enabledZones, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return enableAvailabilityZonesPersistBackendInstanceStateImpl(accountNumber, lbName, enabledZones, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> enableAvailabilityZonesPersistBackendInstanceStateImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> enabledZones, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.enableAvailabilityZonesPersistBackendInstanceState");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = enabledZones;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesPersistRetiredServoInstances(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable) {
        return disableAvailabilityZonesPersistRetiredServoInstancesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesPersistRetiredServoInstances(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistRetiredServoInstancesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesPersistRetiredServoInstances(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistRetiredServoInstancesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesPersistRetiredServoInstances(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable) {
        return disableAvailabilityZonesPersistRetiredServoInstancesImpl(accountNumber, lbName, zonesToDisable, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesPersistRetiredServoInstances(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistRetiredServoInstancesImpl(accountNumber, lbName, zonesToDisable, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesPersistRetiredServoInstances(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistRetiredServoInstancesImpl(accountNumber, lbName, zonesToDisable, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.List<java.lang.String>> disableAvailabilityZonesPersistRetiredServoInstancesImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> zonesToDisable, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.disableAvailabilityZonesPersistRetiredServoInstances");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = zonesToDisable;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.List.class, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistRetiredServoInstancesRollback(String accountNumber, String lbName, java.util.List<java.lang.String> updatedInstanceIds) {
        return disableAvailabilityZonesPersistRetiredServoInstancesRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(updatedInstanceIds), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistRetiredServoInstancesRollback(String accountNumber, String lbName, java.util.List<java.lang.String> updatedInstanceIds, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistRetiredServoInstancesRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(updatedInstanceIds), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistRetiredServoInstancesRollback(String accountNumber, String lbName, java.util.List<java.lang.String> updatedInstanceIds, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistRetiredServoInstancesRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(updatedInstanceIds), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistRetiredServoInstancesRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> updatedInstanceIds) {
        return disableAvailabilityZonesPersistRetiredServoInstancesRollbackImpl(accountNumber, lbName, updatedInstanceIds, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistRetiredServoInstancesRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> updatedInstanceIds, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistRetiredServoInstancesRollbackImpl(accountNumber, lbName, updatedInstanceIds, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistRetiredServoInstancesRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> updatedInstanceIds, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistRetiredServoInstancesRollbackImpl(accountNumber, lbName, updatedInstanceIds, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> disableAvailabilityZonesPersistRetiredServoInstancesRollbackImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> updatedInstanceIds, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.disableAvailabilityZonesPersistRetiredServoInstancesRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = updatedInstanceIds;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesUpdateAutoScalingGroup(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable) {
        return disableAvailabilityZonesUpdateAutoScalingGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesUpdateAutoScalingGroup(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable, Promise<?>... waitFor) {
        return disableAvailabilityZonesUpdateAutoScalingGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesUpdateAutoScalingGroup(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesUpdateAutoScalingGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesUpdateAutoScalingGroup(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable) {
        return disableAvailabilityZonesUpdateAutoScalingGroupImpl(accountNumber, lbName, zonesToDisable, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesUpdateAutoScalingGroup(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable, Promise<?>... waitFor) {
        return disableAvailabilityZonesUpdateAutoScalingGroupImpl(accountNumber, lbName, zonesToDisable, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> disableAvailabilityZonesUpdateAutoScalingGroup(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesUpdateAutoScalingGroupImpl(accountNumber, lbName, zonesToDisable, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.List<java.lang.String>> disableAvailabilityZonesUpdateAutoScalingGroupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> zonesToDisable, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.disableAvailabilityZonesUpdateAutoScalingGroup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = zonesToDisable;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.List.class, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesUpdateAutoScalingGroupRollback(String accountNumber, String lbName, java.util.List<java.lang.String> updatedZones) {
        return disableAvailabilityZonesUpdateAutoScalingGroupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(updatedZones), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesUpdateAutoScalingGroupRollback(String accountNumber, String lbName, java.util.List<java.lang.String> updatedZones, Promise<?>... waitFor) {
        return disableAvailabilityZonesUpdateAutoScalingGroupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(updatedZones), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesUpdateAutoScalingGroupRollback(String accountNumber, String lbName, java.util.List<java.lang.String> updatedZones, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesUpdateAutoScalingGroupRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(updatedZones), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesUpdateAutoScalingGroupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> updatedZones) {
        return disableAvailabilityZonesUpdateAutoScalingGroupRollbackImpl(accountNumber, lbName, updatedZones, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesUpdateAutoScalingGroupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> updatedZones, Promise<?>... waitFor) {
        return disableAvailabilityZonesUpdateAutoScalingGroupRollbackImpl(accountNumber, lbName, updatedZones, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesUpdateAutoScalingGroupRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> updatedZones, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesUpdateAutoScalingGroupRollbackImpl(accountNumber, lbName, updatedZones, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> disableAvailabilityZonesUpdateAutoScalingGroupRollbackImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> updatedZones, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.disableAvailabilityZonesUpdateAutoScalingGroupRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = updatedZones;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistUpdatedZones(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable) {
        return disableAvailabilityZonesPersistUpdatedZonesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistUpdatedZones(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistUpdatedZonesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistUpdatedZones(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistUpdatedZonesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistUpdatedZones(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable) {
        return disableAvailabilityZonesPersistUpdatedZonesImpl(accountNumber, lbName, zonesToDisable, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistUpdatedZones(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistUpdatedZonesImpl(accountNumber, lbName, zonesToDisable, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistUpdatedZones(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistUpdatedZonesImpl(accountNumber, lbName, zonesToDisable, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> disableAvailabilityZonesPersistUpdatedZonesImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> zonesToDisable, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.disableAvailabilityZonesPersistUpdatedZones");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = zonesToDisable;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistBackendInstanceState(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable) {
        return disableAvailabilityZonesPersistBackendInstanceStateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistBackendInstanceState(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistBackendInstanceStateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistBackendInstanceState(String accountNumber, String lbName, java.util.List<java.lang.String> zonesToDisable, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistBackendInstanceStateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(zonesToDisable), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistBackendInstanceState(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable) {
        return disableAvailabilityZonesPersistBackendInstanceStateImpl(accountNumber, lbName, zonesToDisable, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistBackendInstanceState(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistBackendInstanceStateImpl(accountNumber, lbName, zonesToDisable, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> disableAvailabilityZonesPersistBackendInstanceState(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.String>> zonesToDisable, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return disableAvailabilityZonesPersistBackendInstanceStateImpl(accountNumber, lbName, zonesToDisable, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> disableAvailabilityZonesPersistBackendInstanceStateImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.String>> zonesToDisable, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.disableAvailabilityZonesPersistBackendInstanceState");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = zonesToDisable;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> createListenerCheckSSLCertificateId(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners) {
        return createListenerCheckSSLCertificateIdImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerCheckSSLCertificateId(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, Promise<?>... waitFor) {
        return createListenerCheckSSLCertificateIdImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerCheckSSLCertificateId(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerCheckSSLCertificateIdImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> createListenerCheckSSLCertificateId(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners) {
        return createListenerCheckSSLCertificateIdImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerCheckSSLCertificateId(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, Promise<?>... waitFor) {
        return createListenerCheckSSLCertificateIdImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerCheckSSLCertificateId(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerCheckSSLCertificateIdImpl(accountNumber, lbName, listeners, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> createListenerCheckSSLCertificateIdImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createListenerCheckSSLCertificateId");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = listeners;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> createListenerAuthorizeSSLCertificate(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners) {
        return createListenerAuthorizeSSLCertificateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> createListenerAuthorizeSSLCertificate(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, Promise<?>... waitFor) {
        return createListenerAuthorizeSSLCertificateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> createListenerAuthorizeSSLCertificate(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAuthorizeSSLCertificateImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> createListenerAuthorizeSSLCertificate(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners) {
        return createListenerAuthorizeSSLCertificateImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> createListenerAuthorizeSSLCertificate(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, Promise<?>... waitFor) {
        return createListenerAuthorizeSSLCertificateImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> createListenerAuthorizeSSLCertificate(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAuthorizeSSLCertificateImpl(accountNumber, lbName, listeners, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> createListenerAuthorizeSSLCertificateImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createListenerAuthorizeSSLCertificate");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = listeners;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult.class, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeSSLCertificateRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult result) {
        return createListenerAuthorizeSSLCertificateRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeSSLCertificateRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult result, Promise<?>... waitFor) {
        return createListenerAuthorizeSSLCertificateRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeSSLCertificateRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAuthorizeSSLCertificateRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeSSLCertificateRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> result) {
        return createListenerAuthorizeSSLCertificateRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeSSLCertificateRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> result, Promise<?>... waitFor) {
        return createListenerAuthorizeSSLCertificateRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeSSLCertificateRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAuthorizeSSLCertificateRollbackImpl(accountNumber, lbName, result, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> createListenerAuthorizeSSLCertificateRollbackImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeSSLCertificateActivityResult> result, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createListenerAuthorizeSSLCertificateRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = result;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> createListenerAuthorizeIngressRule(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners) {
        return createListenerAuthorizeIngressRuleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> createListenerAuthorizeIngressRule(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, Promise<?>... waitFor) {
        return createListenerAuthorizeIngressRuleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> createListenerAuthorizeIngressRule(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAuthorizeIngressRuleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> createListenerAuthorizeIngressRule(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners) {
        return createListenerAuthorizeIngressRuleImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> createListenerAuthorizeIngressRule(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, Promise<?>... waitFor) {
        return createListenerAuthorizeIngressRuleImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> createListenerAuthorizeIngressRule(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAuthorizeIngressRuleImpl(accountNumber, lbName, listeners, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> createListenerAuthorizeIngressRuleImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createListenerAuthorizeIngressRule");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = listeners;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult.class, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeIngressRuleRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult result) {
        return createListenerAuthorizeIngressRuleRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeIngressRuleRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult result, Promise<?>... waitFor) {
        return createListenerAuthorizeIngressRuleRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeIngressRuleRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAuthorizeIngressRuleRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeIngressRuleRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> result) {
        return createListenerAuthorizeIngressRuleRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeIngressRuleRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> result, Promise<?>... waitFor) {
        return createListenerAuthorizeIngressRuleRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAuthorizeIngressRuleRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAuthorizeIngressRuleRollbackImpl(accountNumber, lbName, result, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> createListenerAuthorizeIngressRuleRollbackImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.workflow.AuthorizeIngressRuleActivityResult> result, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createListenerAuthorizeIngressRuleRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = result;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> createListenerUpdateHealthCheckConfig(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners) {
        return createListenerUpdateHealthCheckConfigImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerUpdateHealthCheckConfig(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, Promise<?>... waitFor) {
        return createListenerUpdateHealthCheckConfigImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerUpdateHealthCheckConfig(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerUpdateHealthCheckConfigImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> createListenerUpdateHealthCheckConfig(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners) {
        return createListenerUpdateHealthCheckConfigImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerUpdateHealthCheckConfig(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, Promise<?>... waitFor) {
        return createListenerUpdateHealthCheckConfigImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerUpdateHealthCheckConfig(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerUpdateHealthCheckConfigImpl(accountNumber, lbName, listeners, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> createListenerUpdateHealthCheckConfigImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createListenerUpdateHealthCheckConfig");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = listeners;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAddDefaultSSLPolicy(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners) {
        return createListenerAddDefaultSSLPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerAddDefaultSSLPolicy(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, Promise<?>... waitFor) {
        return createListenerAddDefaultSSLPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAddDefaultSSLPolicy(String accountNumber, String lbName, com.eucalyptus.loadbalancing.common.msgs.Listener[] listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAddDefaultSSLPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(listeners), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAddDefaultSSLPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners) {
        return createListenerAddDefaultSSLPolicyImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> createListenerAddDefaultSSLPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, Promise<?>... waitFor) {
        return createListenerAddDefaultSSLPolicyImpl(accountNumber, lbName, listeners, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> createListenerAddDefaultSSLPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return createListenerAddDefaultSSLPolicyImpl(accountNumber, lbName, listeners, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> createListenerAddDefaultSSLPolicyImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.common.msgs.Listener[]> listeners, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.createListenerAddDefaultSSLPolicy");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = listeners;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeSSLCertificatePolicy(String accountNumber, String lbName, java.util.List<java.lang.Integer> portsToDelete) {
        return deleteListenerRevokeSSLCertificatePolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(portsToDelete), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeSSLCertificatePolicy(String accountNumber, String lbName, java.util.List<java.lang.Integer> portsToDelete, Promise<?>... waitFor) {
        return deleteListenerRevokeSSLCertificatePolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(portsToDelete), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeSSLCertificatePolicy(String accountNumber, String lbName, java.util.List<java.lang.Integer> portsToDelete, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteListenerRevokeSSLCertificatePolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(portsToDelete), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeSSLCertificatePolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.Integer>> portsToDelete) {
        return deleteListenerRevokeSSLCertificatePolicyImpl(accountNumber, lbName, portsToDelete, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeSSLCertificatePolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.Integer>> portsToDelete, Promise<?>... waitFor) {
        return deleteListenerRevokeSSLCertificatePolicyImpl(accountNumber, lbName, portsToDelete, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeSSLCertificatePolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.Integer>> portsToDelete, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteListenerRevokeSSLCertificatePolicyImpl(accountNumber, lbName, portsToDelete, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteListenerRevokeSSLCertificatePolicyImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.Integer>> portsToDelete, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.deleteListenerRevokeSSLCertificatePolicy");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = portsToDelete;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeIngressRule(String accountNumber, String lbName, java.util.List<java.lang.Integer> portsToDelete) {
        return deleteListenerRevokeIngressRuleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(portsToDelete), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeIngressRule(String accountNumber, String lbName, java.util.List<java.lang.Integer> portsToDelete, Promise<?>... waitFor) {
        return deleteListenerRevokeIngressRuleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(portsToDelete), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeIngressRule(String accountNumber, String lbName, java.util.List<java.lang.Integer> portsToDelete, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteListenerRevokeIngressRuleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(portsToDelete), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeIngressRule(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.Integer>> portsToDelete) {
        return deleteListenerRevokeIngressRuleImpl(accountNumber, lbName, portsToDelete, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeIngressRule(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.Integer>> portsToDelete, Promise<?>... waitFor) {
        return deleteListenerRevokeIngressRuleImpl(accountNumber, lbName, portsToDelete, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteListenerRevokeIngressRule(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.List<java.lang.Integer>> portsToDelete, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteListenerRevokeIngressRuleImpl(accountNumber, lbName, portsToDelete, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteListenerRevokeIngressRuleImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.List<java.lang.Integer>> portsToDelete, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.deleteListenerRevokeIngressRule");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = portsToDelete;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeactivateDns(String accountNumber, String lbName) {
        return deleteLoadBalancerDeactivateDnsImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeactivateDns(String accountNumber, String lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeactivateDnsImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeactivateDns(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeactivateDnsImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeactivateDns(Promise<String> accountNumber, Promise<String> lbName) {
        return deleteLoadBalancerDeactivateDnsImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeactivateDns(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeactivateDnsImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeactivateDns(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeactivateDnsImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteLoadBalancerDeactivateDnsImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.deleteLoadBalancerDeactivateDns");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteScalingGroup(String accountNumber, String lbName) {
        return deleteLoadBalancerDeleteScalingGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteScalingGroup(String accountNumber, String lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteScalingGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteScalingGroup(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteScalingGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteScalingGroup(Promise<String> accountNumber, Promise<String> lbName) {
        return deleteLoadBalancerDeleteScalingGroupImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteScalingGroup(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteScalingGroupImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteScalingGroup(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteScalingGroupImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteLoadBalancerDeleteScalingGroupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.deleteLoadBalancerDeleteScalingGroup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteInstanceProfile(String accountNumber, String lbName) {
        return deleteLoadBalancerDeleteInstanceProfileImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteInstanceProfile(String accountNumber, String lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteInstanceProfileImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteInstanceProfile(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteInstanceProfileImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteInstanceProfile(Promise<String> accountNumber, Promise<String> lbName) {
        return deleteLoadBalancerDeleteInstanceProfileImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteInstanceProfile(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteInstanceProfileImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteInstanceProfile(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteInstanceProfileImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteLoadBalancerDeleteInstanceProfileImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.deleteLoadBalancerDeleteInstanceProfile");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteIamRole(String accountNumber, String lbName) {
        return deleteLoadBalancerDeleteIamRoleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteIamRole(String accountNumber, String lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteIamRoleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteIamRole(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteIamRoleImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteIamRole(Promise<String> accountNumber, Promise<String> lbName) {
        return deleteLoadBalancerDeleteIamRoleImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteIamRole(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteIamRoleImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteIamRole(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteIamRoleImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteLoadBalancerDeleteIamRoleImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.deleteLoadBalancerDeleteIamRole");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteSecurityGroup(String accountNumber, String lbName) {
        return deleteLoadBalancerDeleteSecurityGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteSecurityGroup(String accountNumber, String lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteSecurityGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteSecurityGroup(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteSecurityGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteSecurityGroup(Promise<String> accountNumber, Promise<String> lbName) {
        return deleteLoadBalancerDeleteSecurityGroupImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteSecurityGroup(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteSecurityGroupImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLoadBalancerDeleteSecurityGroup(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLoadBalancerDeleteSecurityGroupImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteLoadBalancerDeleteSecurityGroupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.deleteLoadBalancerDeleteSecurityGroup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> modifyLoadBalancerAttributesCreateAccessLogPolicy(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> modifyLoadBalancerAttributesCreateAccessLogPolicy(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> modifyLoadBalancerAttributesCreateAccessLogPolicy(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> modifyLoadBalancerAttributesCreateAccessLogPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> modifyLoadBalancerAttributesCreateAccessLogPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> modifyLoadBalancerAttributesCreateAccessLogPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> modifyLoadBalancerAttributesCreateAccessLogPolicyImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<Boolean> accessLogEnabled, final Promise<String> s3BucketName, final Promise<String> s3BucketPrefix, final Promise<Integer> emitInterval, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.modifyLoadBalancerAttributesCreateAccessLogPolicy");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[6];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = accessLogEnabled;
        _input_[3] = s3BucketName;
        _input_[4] = s3BucketPrefix;
        _input_[5] = emitInterval;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult.class, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesCreateAccessLogPolicyRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult result) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesCreateAccessLogPolicyRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult result, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesCreateAccessLogPolicyRollback(String accountNumber, String lbName, com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyRollbackImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(result), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesCreateAccessLogPolicyRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> result) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesCreateAccessLogPolicyRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> result, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyRollbackImpl(accountNumber, lbName, result, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesCreateAccessLogPolicyRollback(Promise<String> accountNumber, Promise<String> lbName, Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> result, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesCreateAccessLogPolicyRollbackImpl(accountNumber, lbName, result, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> modifyLoadBalancerAttributesCreateAccessLogPolicyRollbackImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<com.eucalyptus.loadbalancing.workflow.AccessLogPolicyActivityResult> result, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.modifyLoadBalancerAttributesCreateAccessLogPolicyRollback");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = result;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesDeleteAccessLogPolicy(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval) {
        return modifyLoadBalancerAttributesDeleteAccessLogPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesDeleteAccessLogPolicy(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesDeleteAccessLogPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesDeleteAccessLogPolicy(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesDeleteAccessLogPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesDeleteAccessLogPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval) {
        return modifyLoadBalancerAttributesDeleteAccessLogPolicyImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesDeleteAccessLogPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesDeleteAccessLogPolicyImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesDeleteAccessLogPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesDeleteAccessLogPolicyImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> modifyLoadBalancerAttributesDeleteAccessLogPolicyImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<Boolean> accessLogEnabled, final Promise<String> s3BucketName, final Promise<String> s3BucketPrefix, final Promise<Integer> emitInterval, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.modifyLoadBalancerAttributesDeleteAccessLogPolicy");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[6];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = accessLogEnabled;
        _input_[3] = s3BucketName;
        _input_[4] = s3BucketPrefix;
        _input_[5] = emitInterval;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesPersistAttributes(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval) {
        return modifyLoadBalancerAttributesPersistAttributesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesPersistAttributes(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesPersistAttributesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesPersistAttributes(String accountNumber, String lbName, Boolean accessLogEnabled, String s3BucketName, String s3BucketPrefix, Integer emitInterval, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesPersistAttributesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(accessLogEnabled), Promise.asPromise(s3BucketName), Promise.asPromise(s3BucketPrefix), Promise.asPromise(emitInterval), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesPersistAttributes(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval) {
        return modifyLoadBalancerAttributesPersistAttributesImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesPersistAttributes(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesPersistAttributesImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyLoadBalancerAttributesPersistAttributes(Promise<String> accountNumber, Promise<String> lbName, Promise<Boolean> accessLogEnabled, Promise<String> s3BucketName, Promise<String> s3BucketPrefix, Promise<Integer> emitInterval, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyLoadBalancerAttributesPersistAttributesImpl(accountNumber, lbName, accessLogEnabled, s3BucketName, s3BucketPrefix, emitInterval, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> modifyLoadBalancerAttributesPersistAttributesImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<Boolean> accessLogEnabled, final Promise<String> s3BucketName, final Promise<String> s3BucketPrefix, final Promise<Integer> emitInterval, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.modifyLoadBalancerAttributesPersistAttributes");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[6];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = accessLogEnabled;
        _input_[3] = s3BucketName;
        _input_[4] = s3BucketPrefix;
        _input_[5] = emitInterval;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> applySecurityGroupUpdateSecurityGroup(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> groupIdToNames) {
        return applySecurityGroupUpdateSecurityGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(groupIdToNames), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> applySecurityGroupUpdateSecurityGroup(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> groupIdToNames, Promise<?>... waitFor) {
        return applySecurityGroupUpdateSecurityGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(groupIdToNames), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> applySecurityGroupUpdateSecurityGroup(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> groupIdToNames, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return applySecurityGroupUpdateSecurityGroupImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(groupIdToNames), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> applySecurityGroupUpdateSecurityGroup(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> groupIdToNames) {
        return applySecurityGroupUpdateSecurityGroupImpl(accountNumber, lbName, groupIdToNames, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> applySecurityGroupUpdateSecurityGroup(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> groupIdToNames, Promise<?>... waitFor) {
        return applySecurityGroupUpdateSecurityGroupImpl(accountNumber, lbName, groupIdToNames, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> applySecurityGroupUpdateSecurityGroup(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> groupIdToNames, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return applySecurityGroupUpdateSecurityGroupImpl(accountNumber, lbName, groupIdToNames, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> applySecurityGroupUpdateSecurityGroupImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.Map<java.lang.String,java.lang.String>> groupIdToNames, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.applySecurityGroupUpdateSecurityGroup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = groupIdToNames;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesValidateRequest(String emi, String instanceType, String keyname, String initScript) {
        return modifyServicePropertiesValidateRequestImpl(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesValidateRequest(String emi, String instanceType, String keyname, String initScript, Promise<?>... waitFor) {
        return modifyServicePropertiesValidateRequestImpl(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesValidateRequest(String emi, String instanceType, String keyname, String initScript, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyServicePropertiesValidateRequestImpl(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesValidateRequest(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript) {
        return modifyServicePropertiesValidateRequestImpl(emi, instanceType, keyname, initScript, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesValidateRequest(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript, Promise<?>... waitFor) {
        return modifyServicePropertiesValidateRequestImpl(emi, instanceType, keyname, initScript, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesValidateRequest(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyServicePropertiesValidateRequestImpl(emi, instanceType, keyname, initScript, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> modifyServicePropertiesValidateRequestImpl(final Promise<String> emi, final Promise<String> instanceType, final Promise<String> keyname, final Promise<String> initScript, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.modifyServicePropertiesValidateRequest");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[4];
        _input_[0] = emi;
        _input_[1] = instanceType;
        _input_[2] = keyname;
        _input_[3] = initScript;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesUpdateScalingGroup(String emi, String instanceType, String keyname, String initScript) {
        return modifyServicePropertiesUpdateScalingGroupImpl(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesUpdateScalingGroup(String emi, String instanceType, String keyname, String initScript, Promise<?>... waitFor) {
        return modifyServicePropertiesUpdateScalingGroupImpl(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesUpdateScalingGroup(String emi, String instanceType, String keyname, String initScript, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyServicePropertiesUpdateScalingGroupImpl(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesUpdateScalingGroup(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript) {
        return modifyServicePropertiesUpdateScalingGroupImpl(emi, instanceType, keyname, initScript, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesUpdateScalingGroup(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript, Promise<?>... waitFor) {
        return modifyServicePropertiesUpdateScalingGroupImpl(emi, instanceType, keyname, initScript, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> modifyServicePropertiesUpdateScalingGroup(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return modifyServicePropertiesUpdateScalingGroupImpl(emi, instanceType, keyname, initScript, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> modifyServicePropertiesUpdateScalingGroupImpl(final Promise<String> emi, final Promise<String> instanceType, final Promise<String> keyname, final Promise<String> initScript, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.modifyServicePropertiesUpdateScalingGroup");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[4];
        _input_[0] = emi;
        _input_[1] = instanceType;
        _input_[2] = keyname;
        _input_[3] = initScript;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> lookupServoInstances(String accountNumber, String lbName) {
        return lookupServoInstancesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> lookupServoInstances(String accountNumber, String lbName, Promise<?>... waitFor) {
        return lookupServoInstancesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> lookupServoInstances(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return lookupServoInstancesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> lookupServoInstances(Promise<String> accountNumber, Promise<String> lbName) {
        return lookupServoInstancesImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> lookupServoInstances(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return lookupServoInstancesImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> lookupServoInstances(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return lookupServoInstancesImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.List<java.lang.String>> lookupServoInstancesImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.lookupServoInstances");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.List.class, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> listLoadBalancerPolicies(String accountNumber, String lbName) {
        return listLoadBalancerPoliciesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> listLoadBalancerPolicies(String accountNumber, String lbName, Promise<?>... waitFor) {
        return listLoadBalancerPoliciesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> listLoadBalancerPolicies(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return listLoadBalancerPoliciesImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> listLoadBalancerPolicies(Promise<String> accountNumber, Promise<String> lbName) {
        return listLoadBalancerPoliciesImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> listLoadBalancerPolicies(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return listLoadBalancerPoliciesImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.List<java.lang.String>> listLoadBalancerPolicies(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return listLoadBalancerPoliciesImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.List<java.lang.String>> listLoadBalancerPoliciesImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.listLoadBalancerPolicies");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.List.class, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.PolicyDescription> getLoadBalancerPolicy(String accountNumber, String lbName, String policyName) {
        return getLoadBalancerPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(policyName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.PolicyDescription> getLoadBalancerPolicy(String accountNumber, String lbName, String policyName, Promise<?>... waitFor) {
        return getLoadBalancerPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(policyName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.PolicyDescription> getLoadBalancerPolicy(String accountNumber, String lbName, String policyName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return getLoadBalancerPolicyImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(policyName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.PolicyDescription> getLoadBalancerPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<String> policyName) {
        return getLoadBalancerPolicyImpl(accountNumber, lbName, policyName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.PolicyDescription> getLoadBalancerPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<String> policyName, Promise<?>... waitFor) {
        return getLoadBalancerPolicyImpl(accountNumber, lbName, policyName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.PolicyDescription> getLoadBalancerPolicy(Promise<String> accountNumber, Promise<String> lbName, Promise<String> policyName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return getLoadBalancerPolicyImpl(accountNumber, lbName, policyName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.eucalyptus.loadbalancing.common.msgs.PolicyDescription> getLoadBalancerPolicyImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<String> policyName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.getLoadBalancerPolicy");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = policyName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, com.eucalyptus.loadbalancing.common.msgs.PolicyDescription.class, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,com.eucalyptus.loadbalancing.common.msgs.LoadBalancerServoDescription>> lookupLoadBalancerDescription(String accountNumber, String lbName) {
        return lookupLoadBalancerDescriptionImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,com.eucalyptus.loadbalancing.common.msgs.LoadBalancerServoDescription>> lookupLoadBalancerDescription(String accountNumber, String lbName, Promise<?>... waitFor) {
        return lookupLoadBalancerDescriptionImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,com.eucalyptus.loadbalancing.common.msgs.LoadBalancerServoDescription>> lookupLoadBalancerDescription(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return lookupLoadBalancerDescriptionImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,com.eucalyptus.loadbalancing.common.msgs.LoadBalancerServoDescription>> lookupLoadBalancerDescription(Promise<String> accountNumber, Promise<String> lbName) {
        return lookupLoadBalancerDescriptionImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,com.eucalyptus.loadbalancing.common.msgs.LoadBalancerServoDescription>> lookupLoadBalancerDescription(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return lookupLoadBalancerDescriptionImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,com.eucalyptus.loadbalancing.common.msgs.LoadBalancerServoDescription>> lookupLoadBalancerDescription(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return lookupLoadBalancerDescriptionImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.Map<java.lang.String,com.eucalyptus.loadbalancing.common.msgs.LoadBalancerServoDescription>> lookupLoadBalancerDescriptionImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.lookupLoadBalancerDescription");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.Map.class, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.HealthCheck> lookupLoadBalancerHealthCheck(String accountNumber, String lbName) {
        return lookupLoadBalancerHealthCheckImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.HealthCheck> lookupLoadBalancerHealthCheck(String accountNumber, String lbName, Promise<?>... waitFor) {
        return lookupLoadBalancerHealthCheckImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.HealthCheck> lookupLoadBalancerHealthCheck(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return lookupLoadBalancerHealthCheckImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.HealthCheck> lookupLoadBalancerHealthCheck(Promise<String> accountNumber, Promise<String> lbName) {
        return lookupLoadBalancerHealthCheckImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.HealthCheck> lookupLoadBalancerHealthCheck(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return lookupLoadBalancerHealthCheckImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.eucalyptus.loadbalancing.common.msgs.HealthCheck> lookupLoadBalancerHealthCheck(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return lookupLoadBalancerHealthCheckImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.eucalyptus.loadbalancing.common.msgs.HealthCheck> lookupLoadBalancerHealthCheckImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.lookupLoadBalancerHealthCheck");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, com.eucalyptus.loadbalancing.common.msgs.HealthCheck.class, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> filterInstanceStatus(String accountNumber, String lbName, String servoInstanceId, String status) {
        return filterInstanceStatusImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(servoInstanceId), Promise.asPromise(status), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> filterInstanceStatus(String accountNumber, String lbName, String servoInstanceId, String status, Promise<?>... waitFor) {
        return filterInstanceStatusImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(servoInstanceId), Promise.asPromise(status), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> filterInstanceStatus(String accountNumber, String lbName, String servoInstanceId, String status, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return filterInstanceStatusImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(servoInstanceId), Promise.asPromise(status), optionsOverride, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> filterInstanceStatus(Promise<String> accountNumber, Promise<String> lbName, Promise<String> servoInstanceId, Promise<String> status) {
        return filterInstanceStatusImpl(accountNumber, lbName, servoInstanceId, status, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> filterInstanceStatus(Promise<String> accountNumber, Promise<String> lbName, Promise<String> servoInstanceId, Promise<String> status, Promise<?>... waitFor) {
        return filterInstanceStatusImpl(accountNumber, lbName, servoInstanceId, status, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<java.util.Map<java.lang.String,java.lang.String>> filterInstanceStatus(Promise<String> accountNumber, Promise<String> lbName, Promise<String> servoInstanceId, Promise<String> status, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return filterInstanceStatusImpl(accountNumber, lbName, servoInstanceId, status, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<java.util.Map<java.lang.String,java.lang.String>> filterInstanceStatusImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<String> servoInstanceId, final Promise<String> status, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.filterInstanceStatus");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[4];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = servoInstanceId;
        _input_[3] = status;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, java.util.Map.class, waitFor);
    }

    @Override
    public final Promise<Void> updateInstanceStatus(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> statusList) {
        return updateInstanceStatusImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(statusList), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> updateInstanceStatus(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> statusList, Promise<?>... waitFor) {
        return updateInstanceStatusImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(statusList), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> updateInstanceStatus(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> statusList, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return updateInstanceStatusImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(statusList), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> updateInstanceStatus(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> statusList) {
        return updateInstanceStatusImpl(accountNumber, lbName, statusList, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> updateInstanceStatus(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> statusList, Promise<?>... waitFor) {
        return updateInstanceStatusImpl(accountNumber, lbName, statusList, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> updateInstanceStatus(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> statusList, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return updateInstanceStatusImpl(accountNumber, lbName, statusList, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> updateInstanceStatusImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.Map<java.lang.String,java.lang.String>> statusList, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.updateInstanceStatus");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = statusList;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> putCloudWatchInstanceHealth(String accountNumber, String lbName) {
        return putCloudWatchInstanceHealthImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> putCloudWatchInstanceHealth(String accountNumber, String lbName, Promise<?>... waitFor) {
        return putCloudWatchInstanceHealthImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> putCloudWatchInstanceHealth(String accountNumber, String lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return putCloudWatchInstanceHealthImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> putCloudWatchInstanceHealth(Promise<String> accountNumber, Promise<String> lbName) {
        return putCloudWatchInstanceHealthImpl(accountNumber, lbName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> putCloudWatchInstanceHealth(Promise<String> accountNumber, Promise<String> lbName, Promise<?>... waitFor) {
        return putCloudWatchInstanceHealthImpl(accountNumber, lbName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> putCloudWatchInstanceHealth(Promise<String> accountNumber, Promise<String> lbName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return putCloudWatchInstanceHealthImpl(accountNumber, lbName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> putCloudWatchInstanceHealthImpl(final Promise<String> accountNumber, final Promise<String> lbName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.putCloudWatchInstanceHealth");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = accountNumber;
        _input_[1] = lbName;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> putCloudWatchMetrics(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> metric) {
        return putCloudWatchMetricsImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(metric), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> putCloudWatchMetrics(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> metric, Promise<?>... waitFor) {
        return putCloudWatchMetricsImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(metric), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> putCloudWatchMetrics(String accountNumber, String lbName, java.util.Map<java.lang.String,java.lang.String> metric, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return putCloudWatchMetricsImpl(Promise.asPromise(accountNumber), Promise.asPromise(lbName), Promise.asPromise(metric), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> putCloudWatchMetrics(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> metric) {
        return putCloudWatchMetricsImpl(accountNumber, lbName, metric, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> putCloudWatchMetrics(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> metric, Promise<?>... waitFor) {
        return putCloudWatchMetricsImpl(accountNumber, lbName, metric, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> putCloudWatchMetrics(Promise<String> accountNumber, Promise<String> lbName, Promise<java.util.Map<java.lang.String,java.lang.String>> metric, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return putCloudWatchMetricsImpl(accountNumber, lbName, metric, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> putCloudWatchMetricsImpl(final Promise<String> accountNumber, final Promise<String> lbName, final Promise<java.util.Map<java.lang.String,java.lang.String>> metric, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.putCloudWatchMetrics");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = accountNumber;
        _input_[1] = lbName;
        _input_[2] = metric;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> checkServoInstances() {
        return checkServoInstancesImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> checkServoInstances(Promise<?>... waitFor) {
        return checkServoInstancesImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> checkServoInstances(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return checkServoInstancesImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> checkServoInstancesImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.checkServoInstances");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> checkServoInstanceDns() {
        return checkServoInstanceDnsImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> checkServoInstanceDns(Promise<?>... waitFor) {
        return checkServoInstanceDnsImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> checkServoInstanceDns(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return checkServoInstanceDnsImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> checkServoInstanceDnsImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.checkServoInstanceDns");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> checkServoElasticIp() {
        return checkServoElasticIpImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> checkServoElasticIp(Promise<?>... waitFor) {
        return checkServoElasticIpImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> checkServoElasticIp(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return checkServoElasticIpImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> checkServoElasticIpImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.checkServoElasticIp");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> checkBackendInstances() {
        return checkBackendInstancesImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> checkBackendInstances(Promise<?>... waitFor) {
        return checkBackendInstancesImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> checkBackendInstances(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return checkBackendInstancesImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> checkBackendInstancesImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.checkBackendInstances");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> cleanupSecurityGroups() {
        return cleanupSecurityGroupsImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> cleanupSecurityGroups(Promise<?>... waitFor) {
        return cleanupSecurityGroupsImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> cleanupSecurityGroups(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return cleanupSecurityGroupsImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> cleanupSecurityGroupsImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.cleanupSecurityGroups");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> cleanupServoInstances() {
        return cleanupServoInstancesImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> cleanupServoInstances(Promise<?>... waitFor) {
        return cleanupServoInstancesImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> cleanupServoInstances(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return cleanupServoInstancesImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> cleanupServoInstancesImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.cleanupServoInstances");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> runContinousWorkflows() {
        return runContinousWorkflowsImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> runContinousWorkflows(Promise<?>... waitFor) {
        return runContinousWorkflowsImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> runContinousWorkflows(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return runContinousWorkflowsImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> runContinousWorkflowsImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.runContinousWorkflows");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> recycleFailedServoInstances() {
        return recycleFailedServoInstancesImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> recycleFailedServoInstances(Promise<?>... waitFor) {
        return recycleFailedServoInstancesImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> recycleFailedServoInstances(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return recycleFailedServoInstancesImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> recycleFailedServoInstancesImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.recycleFailedServoInstances");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> recordInstanceTaskFailure(String instanceId) {
        return recordInstanceTaskFailureImpl(Promise.asPromise(instanceId), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> recordInstanceTaskFailure(String instanceId, Promise<?>... waitFor) {
        return recordInstanceTaskFailureImpl(Promise.asPromise(instanceId), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> recordInstanceTaskFailure(String instanceId, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return recordInstanceTaskFailureImpl(Promise.asPromise(instanceId), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> recordInstanceTaskFailure(Promise<String> instanceId) {
        return recordInstanceTaskFailureImpl(instanceId, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> recordInstanceTaskFailure(Promise<String> instanceId, Promise<?>... waitFor) {
        return recordInstanceTaskFailureImpl(instanceId, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> recordInstanceTaskFailure(Promise<String> instanceId, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return recordInstanceTaskFailureImpl(instanceId, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> recordInstanceTaskFailureImpl(final Promise<String> instanceId, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.recordInstanceTaskFailure");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[1];
        _input_[0] = instanceId;

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

    @Override
    public final Promise<Void> upgrade4_4() {
        return upgrade4_4Impl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> upgrade4_4(Promise<?>... waitFor) {
        return upgrade4_4Impl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> upgrade4_4(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return upgrade4_4Impl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> upgrade4_4Impl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("LoadBalancingActivities.upgrade4_4");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, Void.class, waitFor);
    }

}