/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.eucalyptus.loadbalancing.workflow;

import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.StartWorkflowOptions;
import com.amazonaws.services.simpleworkflow.flow.WorkflowClientBase;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericWorkflowClient;
import com.amazonaws.services.simpleworkflow.model.WorkflowExecution;
import com.amazonaws.services.simpleworkflow.model.WorkflowType;

class ModifyServicePropertiesWorkflowClientImpl extends WorkflowClientBase implements ModifyServicePropertiesWorkflowClient {

    public ModifyServicePropertiesWorkflowClientImpl(WorkflowExecution workflowExecution, WorkflowType workflowType,  
            StartWorkflowOptions options, DataConverter dataConverter, GenericWorkflowClient genericClient) {
        super(workflowExecution, workflowType, options, dataConverter, genericClient);
    }
    
    @Override
    public final Promise<Void> modifyServiceProperties(String emi, String instanceType, String keyname, String initScript) { 
        return modifyServiceProperties(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), (StartWorkflowOptions)null);
    }
    
    @Override
    public final Promise<Void> modifyServiceProperties(String emi, String instanceType, String keyname, String initScript, Promise<?>... waitFor) {
        return modifyServiceProperties(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), (StartWorkflowOptions)null, waitFor);
    }
    
    
    @Override
    
    public final Promise<Void> modifyServiceProperties(String emi, String instanceType, String keyname, String initScript, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        return modifyServiceProperties(Promise.asPromise(emi), Promise.asPromise(instanceType), Promise.asPromise(keyname), Promise.asPromise(initScript), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> modifyServiceProperties(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript) {
        return modifyServiceProperties(emi, instanceType, keyname, initScript, (StartWorkflowOptions)null);
    }

    @Override
    public final Promise<Void> modifyServiceProperties(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript, Promise<?>... waitFor) {
        return modifyServiceProperties(emi, instanceType, keyname, initScript, (StartWorkflowOptions)null, waitFor);
    }

    @Override
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public final Promise<Void> modifyServiceProperties(Promise<String> emi, Promise<String> instanceType, Promise<String> keyname, Promise<String> initScript, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        Promise[] _input_ = new Promise[4];
        _input_[0] = emi;
        _input_[1] = instanceType;
        _input_[2] = keyname;
        _input_[3] = initScript;
        return (Promise) startWorkflowExecution(_input_, optionsOverride, Void.class, waitFor);
    }
    	

}