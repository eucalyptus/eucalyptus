<!--
  Copyright 2008 Regents of the University of California
  Copyright 2009-2015 Ent. Services Development Corporation LP

  Redistribution and use of this software in source and binary forms,
  with or without modification, are permitted provided that the
  following conditions are met:

    Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer
    in the documentation and/or other materials provided with the
    distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE. USERS OF THIS SOFTWARE ACKNOWLEDGE
  THE POSSIBLE PRESENCE OF OTHER OPEN SOURCE LICENSED MATERIAL,
  COPYRIGHTED MATERIAL OR PATENTED MATERIAL IN THIS SOFTWARE,
  AND IF ANY SUCH MATERIAL IS DISCOVERED THE PARTY DISCOVERING
  IT MAY INFORM DR. RICH WOLSKI AT THE UNIVERSITY OF CALIFORNIA,
  SANTA BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY,
  WHICH IN THE REGENTS' DISCRETION MAY INCLUDE, WITHOUT LIMITATION,
  REPLACEMENT OF THE CODE SO IDENTIFIED, LICENSING OF THE CODE SO
  IDENTIFIED, OR WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT
  NEEDED TO COMPLY WITH ANY SUCH LICENSES OR RIGHTS.
-->

<project name="eucalyptus-module-import" xmlns:ivy="antlib:org.apache.ivy.ant">
	<!--================================== euca defines ==================================-->
	<property name="project.basedir" value="${basedir}/../../" />
	<property file="${basedir}/../../local.module.properties" />
	<property environment="localenv" />
	<property name="euca.home.0" value="${localenv.EUCALYPTUS}" />
	<condition property="euca.home" value="/opt/eucalyptus" else="${localenv.EUCALYPTUS}">
		<contains string="${euca.home.0}" substring="localenv" />
	</condition>
	<property name="DESTDIR.0" value="${localenv.DESTDIR}" />
	<condition property="DESTDIR" value="/" else="${localenv.DESTDIR}">
		<contains string="${DESTDIR.0}" substring="localenv" />
	</condition>
	<loadfile srcfile="${project.basedir}/../VERSION" property="euca.version">
		<filterchain>
			<filterreader classname="org.apache.tools.ant.filters.StripLineBreaks" />
		</filterchain>
	</loadfile>
	<property name="euca.etc.dir" value="${euca.home}/etc/eucalyptus" />
	<property name="euca.conf.dir" value="${euca.home}/etc/eucalyptus/cloud.d" />
	<property name="euca.lib.dir" value="${euca.home}/usr/share/eucalyptus/lib" />
	<property name="euca.var.dir" value="${euca.home}/var/lib/eucalyptus" />
	<property name="euca.run.dir" value="${euca.home}/var/run/eucalyptus" />
	<property name="euca.log.dir" value="${euca.home}/var/log/eucalyptus" />
	<propertyset id="euca-props">
		<propertyref prefix="euca" />
	</propertyset>
	<!--================================== module-dir defines ==================================-->
	<property name="build.dir" value="${basedir}/build" />
	<property name="build.classes.dir" value="${build.dir}/classes" />
	<property name="build.test.dir" value="${build.dir}/test-classes" />
	<property name="build.src.dir" value="${build.dir}/src" />
	<property name="generated.src.dir" value="${basedir}/src/generated/java" />
	<property name="src.dir" value="${basedir}/src/main/java" />
	<property name="groovy.src.dir" value="${basedir}/src/main/groovy" />
	<property name="test.dir" value="${basedir}/src/test/java" />
	<property name="conf.dir" value="${basedir}/conf" />
	<property name="rsrc.dir" value="${basedir}/src/main/resources" />
	<property name="test.resources.dir" value="${basedir}/src/test/resources" />
	<property name="target.dir" value="${project.basedir}/target" />
	<property name="jar.file" value="${target.dir}/${ant.project.name}-${euca.version}.jar" />
	<property name="lib.dir.default" value="${project.basedir}/lib" />
	<property name="lib.dir.sources" value="/source/eucalyptus-cloud-libs" />
	<property name="modules.dir" value="${project.basedir}/modules" />
	<condition property="lib.dir" value="${lib.dir.default}">
		<available file="${lib.dir.default}" type="dir"/>
	</condition>
	<condition property="lib.dir" value="${lib.dir.sources}">
		<available file="${lib.dir.sources}" type="dir"/>
	</condition>
	<fail unless="lib.dir" message="libraries directory could not be detected, please set lib.dir"/>
	<!--================================== module properties  ==================================-->
	<property name="jar.build.includes" value="**/*"/>
	<property name="jar.build.excludes" value=""/>
	<property name="jar.resource.includes" value="**/*"/>
	<property name="jar.resource.excludes" value="**/*.in"/>
	<property name="javac.source" value="1.8"/>
	<property name="javac.target" value="${javac.source}"/>
	<property name="javac.debug" value="true"/>
	<property name="javac.includeantruntime" value="false"/>
	<property name="javac.bootclasspath" value="${sun.boot.class.path}"/>
	<property name="javac.extraargs.xlint.unchecked" value="unchecked"/>
	<property name="javac.extraargs.xlint" value="-Xlint:divzero,finally,overrides,-deprecation,${javac.extraargs.xlint.unchecked}"/>
	<property name="javac.extraargs.werror" value="-Werror"/>
	<property name="groovyc.fork" value="false"/>
	<property name="groovyc.includeantruntime" value="true"/>
	<property name="bind.load" value="true"/>
	<property name="bind.verbose" value="false"/>
	<!--================================== other properties  ===================================-->
	<property name="euca.junit.jvmargs" value="-ea"/>
	<!--================================== classpaths ==================================-->
	<path id="runtimeclasspath">
		<pathelement path="${euca.conf.dir}" />
		<fileset dir="${euca.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="srcpath">
		<fileset dir="${build.classes.dir}">
			<include name="**/*" />
		</fileset>
	</path>
	<path id="resources-classpath">
		<dirset dir="${modules.dir}">
			<include name="**/src/main/resources" />
		</dirset>
	</path>
	<path id="test-resources-classpath">
		<dirset dir="${modules.dir}">
			<include name="**/src/test/resources" />
		</dirset>
	</path>
	<path id="jibx-classpath">
		<fileset dir="${lib.dir}" erroronmissingdir="false">
			<include name="bcel-*.jar" />
			<include name="dom4j-*.jar" />
			<include name="jibx-*.jar" />
			<include name="joda-time-*.jar" />
			<include name="log4j-*.jar" />
			<include name="xpp3-*.jar" />
		</fileset>
	</path>
	<!--================================== dependencies  ===================================-->
	<!-- Fix for RHEL bug 810067 -->
	<taskdef uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}" />
	<taskdef name="bind" classname="org.jibx.binding.ant.CompileTask" onerror="ignore">
		<classpath>
			<path refid="jibx-classpath"/>
		</classpath>
	</taskdef>
	<!--================================== copy conf ==================================-->
	<target name="copy-conf">
		<copy todir="${DESTDIR}${euca.conf.dir}">
			<fileset dir="conf">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>
	<!--================================== init target ==================================-->
	<target name="build-mkdirs">
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.test.dir}" />
		<mkdir dir="${build.src.dir}/main/java" />
		<mkdir dir="${conf.dir}" />
		<mkdir dir="${rsrc.dir}" />
		<mkdir dir="${test.dir}" />
		<mkdir dir="${src.dir}" />
		<mkdir dir="${generated.src.dir}" />
	</target>
	<target name="classpaths" unless="build.notRequired">
		<ivy:info file="${basedir}/ivy.xml" />
		<ivy:buildlist reference="buildlist-build-xml-path" onmissingdescriptor="skip" root="${ivy.module}">
			<fileset dir="${modules.dir}" includes="**/build.xml"/>
		</ivy:buildlist>
		<pathconvert property="buildlist-build-path">
			<mapper type="regexp" from="(.*)\.xml" to="\1/classes"/>
			<path refid="buildlist-build-xml-path"/>
		</pathconvert>
		<echo message="**** MODULECLASSPATH: ${buildlist-build-path}" level="verbose" />
		<path id="classpath">
			<pathelement path="${conf.dir}" />
			<pathelement path="${buildlist-build-path}"/>
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
				<exclude name="**/eucalyptus-*-${euca.version}.jar" />
			</fileset>
		</path>
		<path id="test-classpath">
			<fileset dir="${lib.dir}/tests">
				<include name="**/*.jar" />
			</fileset>
			<dirset dir="${modules.dir}">
				<include name="**/build/test-classes" />
			</dirset>
			<path refid="classpath"/>
	 	</path>
		<path id="generate-classpath">
			<fileset dir="${lib.dir}/generate" erroronmissingdir="false">
				<include name="**/*.jar" />
			</fileset>
			<path refid="classpath"/>
		</path>
	</target>
	<target name="builder" description="--> build the jar file from source.">
		<condition property="builder.target" value="build-${builder.suffix}" else="build-all">
			<isset property="builder.suffix" />
		</condition>
		<echo message="[BUILDER] ${builder.target} for ${ant.project.name}" />
		<antcall target="build-mkdirs" inheritall="true" inheritrefs="true" />
		<antcall target="${builder.target}" inheritall="true" inheritrefs="true" />
	</target>
	<target name="should-build-test">
		<mkdir dir="${build.test.dir}" />
		<uptodate property="build.notRequired" targetfile="${jar.file}">
			<srcfiles dir="${src.dir}" includes="**/*" />
			<srcfiles dir="${generated.src.dir}" includes="**/*" />
			<srcfiles dir="${test.dir}" includes="**/*" />
		</uptodate>
	</target>
	<target name="should-build-java">
		<mkdir dir="${build.classes.dir}" />
		<uptodate property="build.notRequired" targetfile="${jar.file}">
			<srcfiles dir="${src.dir}" includes="**/*" />
			<srcfiles dir="${generated.src.dir}" includes="**/*" />
		</uptodate>
	</target>
	<target name="build-java" depends="should-build-java,classpaths" unless="build.notRequired">
		<echo message="[COMPILE] ${builder.target} for ${ant.project.name}" />
		<antcall target="clean" />
		<antcall target="build-mkdirs" inheritall="true" inheritrefs="true" />
		<javac classpathref="classpath" destdir="${build.classes.dir}" deprecation="false" failonerror="true" debug="${javac.debug}" sourcepathref="srcpath" source="${javac.source}" target="${javac.target}" encoding="utf-8" listfiles="true"  includeantruntime="${javac.includeantruntime}">
			<src path="${src.dir}"/>
			<src path="${generated.src.dir}"/>
			<compilerarg line="-s ${build.src.dir}/main/java"/>
			<compilerarg value="-Xbootclasspath:${javac.bootclasspath}"/>
			<compilerarg value="${javac.extraargs.xlint}"/>
			<compilerarg value="${javac.extraargs.werror}"/>
			<compilerarg value="-implicit:class"/>
		</javac>
		<antcall target="build-bindings" />
	</target>
	<target name="should-build-groovy">
		<mkdir dir="${build.classes.dir}" />
		<uptodate property="build.notRequired" targetfile="${jar.file}">
			<srcfiles dir="${groovy.src.dir}" includes="**/*" erroronmissingdir="false"/>
		</uptodate>
		<condition property="build.notRequired">
			<not><available file="${groovy.src.dir}" type="dir"/></not>
		</condition>
	</target>
	<target name="build-groovy" depends="classpaths,build-java,should-build-groovy" unless="build.notRequired">
		<echo message="[COMPILE] main for ${ant.project.name}" />
		<antcall target="build-mkdirs" inheritall="true" inheritrefs="true" />
		<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="classpath" />
		<groovyc srcdir="${groovy.src.dir}" classpathref="classpath" includeantruntime="${groovyc.includeantruntime}" fork="${groovyc.fork}" destdir="${build.classes.dir}" verbose="true" listfiles="true" configscript="${project.basedir}/config.groovy"/>
		<antcall target="build-bindings" />
	</target>
	<target name="build-bindings" depends="classpaths">
		<echo message="[COMPILE] bindings for ${ant.project.name}" />
		<bind verbose="${bind.verbose}" load="${bind.load}">
			<bindingfileset dir="${rsrc.dir}">
				<include name="**/*-binding.xml" />
			</bindingfileset>
			<classpath>
				<pathelement path="${build.classes.dir}"/>
				<pathelement path="${rsrc.dir}"/>
				<path refid="classpath"/>
			</classpath>
		</bind>
		<copy todir="${build.classes.dir}"> <!-- copy for inclusion in other bindings -->
			<fileset dir="${rsrc.dir}">
				<include name="**/*-binding.xml" />
			</fileset>
		</copy>
	</target>
	<target name="build-all" depends="build-groovy"/>
	<target name="builder-test" depends="classpaths,build-all">
		<antcall target="build-mkdirs" inheritall="true" inheritrefs="true" />
		<echo message="[COMPILE] test for ${ant.project.name}" />
		<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="classpath" />
		<groovyc srcdir="${test.dir}" classpathref="test-classpath" includeantruntime="false" fork="true" destdir="${build.test.dir}" verbose="true" listfiles="true">
			<javac source="${javac.source}" target="${javac.target}" encoding="utf-8" debug="true" />
		</groovyc>
	</target>

	<!--================================== test target ==================================-->
	<target name="junit" depends="junit-fail-flag"/>
	<target name="junit-run" depends="classpaths,builder-test">
                <delete file="${build.dir}/reports/junit/failure" quiet="true"/>
                <property name="junit.halt" value="on"/>
                <property name="junit.reports.dir" value="${build.dir}/reports/junit"/>
                <mkdir dir="${junit.reports.dir}"/>
                <junit fork="yes" forkmode="once" maxmemory="512m" printsummary="off" haltonerror="${junit.halt}" haltonfailure="${junit.halt}" failureproperty="junit.failure" includeantruntime="yes" showoutput="yes">
                        <jvmarg line="${euca.junit.jvmargs}" />
                        <formatter type="plain" usefile="false"/>
                        <formatter type="xml" />
                        <classpath>
                                <path refid="test-resources-classpath"/>
                                <path refid="resources-classpath"/>
                                <path refid="test-classpath"/>
                        </classpath>
                        <!-- TODO use skipNonTests=true and remove includes/excludes once we can use ant 1.9.3 -->
                        <batchtest todir="${junit.reports.dir}">
                                <fileset dir="${build.test.dir}">
                                        <include name="**/*Test*"/>
                                        <include name="**/*Specification*"/>
                                        <exclude name="**/*$*"/>
                                        <exclude name="**/Test*"/>
                                        <exclude name="**/*TestSupport.class"/>
                                </fileset>
                        </batchtest>
                </junit>
        </target>
	<target name="junit-fail-flag" depends="junit-run" if="junit.failure">
		<touch file="${build.dir}/reports/junit/failure"/>
	</target>
	<!--================================== jar target ==================================-->
	<target name="jar">
		<mkdir dir="${target.dir}" />
		<uptodate property="jar.notRequired" targetfile="${jar.file}">
			<srcfiles dir="${build.classes.dir}" includes="**/*" excludes="**/*.java"/>
			<srcfiles dir="${rsrc.dir}" includes="**/*" />
		</uptodate>
		<antcall target="do-jar" />
	</target>
	<target name="do-jar" unless="jar.notRequired">
		<echo message="[JARFILE] target/${ant.project.name}-${euca.version}.jar" />
		<delete file="${jar.file}" />
		<jar destfile="${jar.file}" duplicate="preserve" level="9">
			<fileset dir="${build.classes.dir}">
				<include name="${jar.build.includes}" />
				<exclude name="${jar.build.excludes}" />
			</fileset>
			<fileset dir="${rsrc.dir}">
				<include name="${jar.resource.includes}" />
				<exclude name="${jar.resource.excludes}" />
			</fileset>
		</jar>
	</target>
	<target name="install">
		<copy todir="${DESTDIR}${euca.conf.dir}">
			<fileset dir="conf">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${DESTDIR}${euca.lib.dir}" verbose="true">
			<fileset file="${jar.file}" />
		</copy>
		<antcall target="install-module" />
	</target>
	<!--============================= code generation targets ============================-->
	<target name="generate">
		<antcall target="clean-generated" />
		<antcall target="generate-module" />
	</target>
	<target name="generate-java" depends="classpaths">
		<antcall target="build-mkdirs" />
		<echo level="info" messsage="Generating Java source"/>
		<javac source="${javac.source}" target="${javac.target}" classpathref="generate-classpath" deprecation="false" failonerror="true" debug="${javac.debug}" encoding="utf-8" listfiles="true" includeantruntime="${javac.includeantruntime}">
			<compilerarg value="-proc:only"/>
			<compilerarg value="-s"/>
			<compilerarg value="${generated.src.dir}"/>
			<src path="${src.dir}"/>
			<include name="**/workflow/**/*.java"/>
		</javac>
	</target>
	<target name="clean-generated">
		<antcall target="clean-generated-module" />
		<delete dir="${generated.src.dir}" />
	</target>
	<!--================================== clean target ==================================-->
	<target name="clean">
		<antcall target="clean-module" />
		<delete dir="${build.dir}" />
		<delete file="${jar.file}" />
	</target>
	<target name="distclean">
		<antcall target="distclean-module" />
	</target>
	<target name="uninstall">
		<antcall target="uninstall" />
	</target>
	<!--================================== module sub-targets ==================================-->
	<target name="clean-module" />
	<target name="clean-generated-module" />
	<target name="generate-module" />
	<target name="distclean-module" />
	<target name="uninstall-module" />
	<target name="install-module" />
</project>
