<!--
  Copyright 2008 Regents of the University of California
  Copyright 2009-2012 Ent. Services Development Corporation LP

  Redistribution and use of this software in source and binary forms,
  with or without modification, are permitted provided that the
  following conditions are met:

    Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer
    in the documentation and/or other materials provided with the
    distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE. USERS OF THIS SOFTWARE ACKNOWLEDGE
  THE POSSIBLE PRESENCE OF OTHER OPEN SOURCE LICENSED MATERIAL,
  COPYRIGHTED MATERIAL OR PATENTED MATERIAL IN THIS SOFTWARE,
  AND IF ANY SUCH MATERIAL IS DISCOVERED THE PARTY DISCOVERING
  IT MAY INFORM DR. RICH WOLSKI AT THE UNIVERSITY OF CALIFORNIA,
  SANTA BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY,
  WHICH IN THE REGENTS' DISCRETION MAY INCLUDE, WITHOUT LIMITATION,
  REPLACEMENT OF THE CODE SO IDENTIFIED, LICENSING OF THE CODE SO
  IDENTIFIED, OR WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT
  NEEDED TO COMPLY WITH ANY SUCH LICENSES OR RIGHTS.
-->

<project name="eucalyptus" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property file="${basedir}/local.properties" />
	<property environment="localenv" />
	<property name="euca.home.0" value="${localenv.EUCALYPTUS}" />
	<condition property="euca.home" value="/opt/eucalyptus" else="${localenv.EUCALYPTUS}">
		<contains string="${euca.home.0}" substring="localenv" />
	</condition>
	<property name="DESTDIR.0" value="${localenv.DESTDIR}" />
	<condition property="DESTDIR" value="/" else="${localenv.DESTDIR}">
		<contains string="${DESTDIR.0}" substring="localenv" />
	</condition>
	<property name="project.basedir" value="${user.dir}" />
	<loadfile srcfile="${project.basedir}/../VERSION" property="euca.version">
		<filterchain>
			<filterreader classname="org.apache.tools.ant.filters.StripLineBreaks" />
		</filterchain>
	</loadfile>
	<!--================================== other vars ==================================-->
	<property name="tools.dir" value="tools/src" />
	<property name="deps.lib" value="cloud-lib" />
	<property name="bind.timestamp" value="target/.bind-timestamp" />
	<property name="bind.msgs" value="modules/msgs/src/main/resources/msgs-binding.xml" />
    <property name="ivy.jar" value="/usr/share/java/ivy.jar" />
	<!--================================== build helpers ===============================-->
	<!-- Fix for RHEL bug 810067 -->
	<taskdef uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}" />

	<ivy:buildlist reference="build-module-path" onmissingdescriptor="skip">
		<fileset dir="modules" includes="**/build.xml"/>
	</ivy:buildlist>
	<echo message="**** BUILDPATH: ${toString:build-module-path}" level="verbose" />

	<macrodef name="call-module-target">
		<attribute name="target" />
		<sequential>
			<subant target="@{target}" buildpathref="build-module-path">
				<property name="project.basedir" value="${project.basedir}" />
				<propertyset>
					<propertyref prefix="junit."/>
					<propertyref prefix="module.skip"/>
				</propertyset>
			</subant>
		</sequential>
	</macrodef>
	<!--================================== build targets ==================================-->
	<target name="build" description="Build and package">
		<ant inheritall="false" target="build-all" />
		<ant inheritall="false" target="jar" />
	</target>
	
	<target name="build-all">
		<call-module-target target="builder"/>
	</target>
	
	<target name="build-test">
		<ant inheritall="false" target="build-test-all" />
		<ant inheritall="false" target="jar" />
	</target>
	
	<target name="build-test-all">
		<call-module-target target="builder-test"/>
	</target>

	<target name="jar">
		<call-module-target target="jar"/>
	</target>

	<!--================================== test targets ===================================-->
	<target name="junit" description="Run unit tests">
		<call-module-target target="junit"/>
	</target>
	<target name="junit-report">
		<!-- Run tests -->
		<property name="junit.halt" value="off"/>
		<call-module-target target="junit"/>

		<!-- Generate report -->
		<mkdir dir="target/reports/junit/html"/>
		<junitreport todir="target/reports/junit">
			<fileset dir="modules">
				<include name="*/build/reports/junit/TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="target/reports/junit/html"/>
		</junitreport>
		<zip destfile="target/reports/junit.zip" basedir="target/reports/junit" />

		<!-- Fail build on test failures -->
		<pathconvert targetos="unix" property="junit.failure.path">
			<fileset dir="${project.basedir}/modules" includes="*/build/reports/junit/failure"/>
 		</pathconvert>
		<condition property="junit.failure">
			<not>
				<length string="${junit.failure.path}" length="0" />
			</not>
		</condition>
		<fail if="junit.failure" message="JUnit test failure"/>
	</target>

	<!--================================== code targets ==================================-->
	<target name="generate" description="Generate checked in sources">
		<call-module-target target="generate"/>
	</target>
	<target name="clean-generated">
		<call-module-target target="clean-generated"/>
	</target>
	<!--================================== clean targets ==================================-->
	<target name="clean" description="Clean all build artifacts">
		<call-module-target target="clean"/>
		<delete file="${project.basedir}/modules/msgs/src/main/resources/msgs-binding.xml"/>
	</target>
	<target name="distclean" depends="clean">
		<call-module-target target="distclean"/>
		<delete dir="target" />
	</target>
	<!--================================== install target ==================================-->
	<property name="euca.conf.dir" value="${euca.home}/etc/eucalyptus/cloud.d" />
	<property name="euca.lib.dir" value="${euca.home}/usr/share/eucalyptus/lib" />
	<property name="euca.var.dir" value="${euca.home}/var/lib/eucalyptus" />
	<property name="euca.run.dir" value="${euca.home}/var/run/eucalyptus" />
	<property name="euca.log.dir" value="${euca.home}/var/log/eucalyptus" />
	<property name="euca.bin.dir" value="${euca.home}/usr/sbin" />
	<target name="install" description="Copy files to install locations"> <!-- depends="build-all,jar" -->
		<mkdir dir="${DESTDIR}${euca.bin.dir}" />
		<chmod dir="${DESTDIR}${euca.bin.dir}" perm="0755">
			<include name="**/euca-*" />
		</chmod>
		<mkdir dir="${DESTDIR}${euca.conf.dir}" />
		<chmod dir="${DESTDIR}${euca.conf.dir}" perm="0755" />
		<mkdir dir="${DESTDIR}${euca.var.dir}/" />
		<chmod dir="${DESTDIR}${euca.var.dir}" perm="0755" />
		<mkdir dir="${DESTDIR}${euca.var.dir}/db" />
		<mkdir dir="${DESTDIR}${euca.var.dir}/keys" />
		<mkdir dir="${DESTDIR}${euca.log.dir}" />
		<chmod dir="${DESTDIR}${euca.log.dir}" perm="0750" />
		<mkdir dir="${DESTDIR}${euca.var.dir}/modules" />
		<mkdir dir="${DESTDIR}${euca.run.dir}" />
		<call-module-target target="install"/>
	</target>
</project>
