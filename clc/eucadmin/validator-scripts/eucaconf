#!/usr/bin/env python
#
# An all-purpose validator for eucalyptus.conf on a single machine
#
# Copyright 2013-2014 Eucalyptus Systems, Inc.
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the following
# conditions are met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import sys
import json
import pwd
import re
import subprocess
from eucadmin import configfile
from eucadmin import iputils
from eucadmin.constants import *

euca_home = os.environ.get('EUCALYPTUS', '/')

roles = set(['CLC', 'WS', 'SC', 'CC', 'NC'])
if os.environ.has_key('EUCA_ROLES'):
    roles = set(os.environ['EUCA_ROLES'].split(','))

cf = configfile.EucaConfigFile(os.path.join(euca_home,
                               EUCA_CONF_FILE))

subchecks = {}

valid_devs = iputils.getDevices()

# VNET_MODE
check = { "failed": 0 }
if cf['VNET_MODE'] not in ['MANAGED', 'MANAGED-NOVLAN', 'STATIC', 'SYSTEM']:
    check.update({ "failed": 1,
                   "error": "%s is not a valid network mode" % cf['VNET_MODE'],
                   "resolution": "Set network mode to one of the following:" \
                                 "MANAGED, MANAGED-NOVLAN, STATIC, or SYSTEM" })
subchecks['VNET_MODE'] = check

# VNET_PUBINTERFACE
if ('CC' in roles and cf['VNET_MODE'] in ['MANAGED', 'MANAGED-NOVLAN']) or \
   ('NC' in roles and cf['VNET_MODE'] in ['MANAGED']):
    check = { "failed": 0 }
    if cf['VNET_PUBINTERFACE'] not in valid_devs:
        check.update({ "failed": 1,
                       "error": "%s is not a valid interface" % cf['VNET_PUBINTERFACE'],
                       "resolution": "Set VNET_PUBINTERFACE to a valid device" })
    subchecks['VNET_PUBINTERFACE'] = check

# VNET_PRIVINTERFACE
if 'CC' in roles and cf['VNET_MODE'] in ['MANAGED', 'MANAGED-NOVLAN', 'STATIC']:
    check = { "failed": 0 }
    if cf['VNET_PRIVINTERFACE'] not in valid_devs:
        check.update({ "failed": 1,
                       "error": "%s is not a valid interface" % cf['VNET_PRIVINTERFACE'],
                       "resolution": "Set VNET_PRIVINTERFACE to a valid device" })
    subchecks['VNET_PRIVINTERFACE'] = check

# VNET_BRIDGE
if 'NC' in roles and cf['VNET_MODE'] in ['SYSTEM', 'STATIC', 'MANAGED-NOVLAN']:
    check = { "failed": 0 }
    if cf['VNET_BRIDGE'] not in valid_devs:
        check.update({ "failed": 1,
                       "error": "%s is not a valid interface" % cf['VNET_BRIDGE'],
                       "resolution": "Set VNET_BRIDGE to a valid device" })
    elif not os.path.exists('/sys/class/net/%s/bridge' % cf['VNET_BRIDGE']):
        check.update({ "failed": 1,
                       "error": "%s is not a bridge device" % cf['VNET_BRIDGE'] })
        if os.path.exists('/sys/class/net/%s/brport/bridge' % cf['VNET_BRIDGE']):
            check.update({ "resolution": "The specified device is a slave to bridge %s;" \
                                         " please set VNET_BRIDGE to the bridge device instead." % \
                                         os.path.basename(os.readlink('/sys/class/net/em1/brport/bridge')) })
        else:
            check.update({ "resolution": "Set VNET_BRIDGE to a valid bridge device." })
    subchecks['VNET_BRIDGE'] = check

# VNET_MACMAP
if 'CC' in roles and cf['VNET_MODE'] == 'STATIC':
    check = { "failed": 0 }
    if not cf.get('VNET_MACMAP'):
        check.update({ "failed": 1,
                       "error": "VNET_MACMAP is required for STATIC mode",
                       "resolution": "Define VNET_MACMAP" })
    else:
        try:
            mac_map = [ x.split('=', 1) for x in cf['VNET_MACMAP'].split() ]
            for mac, ip in mac_map:
                iputils.sanityCheckMacString(mac)
                iputils.sanityCheckIPString(ip)
        except Exception, e:
            check.update({ "failed": 1,
                           "error": str(e),
                           "resolution": "Correct the format of VNET_MACMAP" })
    subchecks['VNET_MACMAP'] = check

# VNET_PUBLICIPS
if 'CC' in roles and cf['VNET_MODE'].startswith('MANAGED'):
    check = { "failed": 0 }
    if not cf.get('VNET_PUBLICIPS'):
        check.update({ "failed": 1,
                       "error": "VNET_PUBLICIPS is required for %s mode" % cf['VNET_MODE'],
                       "resolution": "Define VNET_PUBLICIPS" })
    else:
        errors = []
        # Validate public address range
        # TODO: can we have both a list and range?  Check CC code
        pubaddresses = [ x for x in iputils.getDeviceAddresses(cf['VNET_PUBINTERFACE']) if int(x[1]) != 32 ]
        if pubaddresses is None or not len(pubaddresses):
            # This is a weird exception case.
            errors.append("Public interface %s has no addresses!" % pubif)
        if cf['VNET_PUBLICIPS'].find('-') != -1:
            # This is a range of IPs
            start, end = cf['VNET_PUBLICIPS'].split('-', 1)
            valid_ips = True
            for ip in [ start, end ]:
                try:
                    iputils.sanityCheckIPString(ip)
                except iputils.IPError, e:
                    errors.extend(e.args)
                    valid_ips = False
                    continue
                except iputils.IPMissing, e:
                    errors.extend(e.args)
                    valid_ips = False
                    continue
                if not iputils.isAddressInSubnet(ip, pubaddresses[0]):
                    errors.append("IP %s is not in the public subnet." % ip)
            if valid_ips and iputils.compareIPs(start, end) > 0:
                errors.append("The public IP range order is incorrect: %s > %s" % (start, end))
        else:
            # This is a list of IPs
            pubips = cf['VNET_PUBLICIPS'].split()
            if not len(pubips):
                errors.append("The public IP field cannot be empty.")
            for ip in pubips:
                try:
                    iputils.sanityCheckIPString(ip)
                    if not iputils.isAddressInSubnet(ip, pubaddresses[0]):
                        errors.append("IP %s is not in the public subnet." % ip)
                except iputils.IPError, e:
                    errors.extend(str(e))

        if len(errors):
            check.update({ "failed": 1,
                           "error": "\n".join(errors),
                           "resolution": "Correct the VNET_PUBLICIPS setting" })
    subchecks['VNET_PUBLICIPS'] = check

# VNET_SUBNET
if 'CC' in roles and cf['VNET_MODE'] != 'SYSTEM':
    check = { "failed": 0 }
    if not cf.get('VNET_SUBNET'):
        check.update({ "failed": 1,
                       "error": "VNET_SUBNET is required for %s mode" % cf['VNET_MODE'],
                       "resolution": "Define VNET_SUBNET" })
    else:
        # TODO: We can't check much here without also checking netmask
        pass

    subchecks['VNET_SUBNET'] = check

# VNET_NETMASK
if 'CC' in roles and cf['VNET_MODE'] != 'SYSTEM':
    check = { "failed": 0 }
    if not cf.get('VNET_NETMASK'):
        check.update({ "failed": 1,
                       "error": "VNET_NETMASK is required for %s mode" % cf['VNET_MODE'],
                       "resolution": "Define VNET_SUBNET" })
    else:
        # TODO: We can't check much here without also checking subnet
        pass

    subchecks['VNET_NETMASK'] = check

# VNET_ADDRSPERNET
if 'CC' in roles and cf['VNET_MODE'].startswith('MANAGED'):
    check = { "failed": 0 }
    if not cf.get('VNET_ADDRSPERNET'):
        check.update({ "failed": 1,
                       "error": "VNET_ADDRSPERNET is required for %s mode" % cf['VNET_MODE'],
                       "resolution": "Define VNET_ADDRSPERNET" })
    else:
        errors = []
        try:
            addrspernet = int(cf['VNET_ADDRSPERNET'])
            if cf.get('VNET_SUBNET') and \
               cf.get('VNET_ADDRSPERNET') and \
               (iputils.getSubnetSize(cf['VNET_NETMASK']) < addrspernet):
                errors.append("VNET_ADDRSPERNET must be smaller than the private network size.")

            if not re.match(r'^0b10*$', bin(addrspernet)):
                errors.append("VNET_ADDRSPERNET must be an integer power of two.")
            if addrspernet < 16 or addrspernet > 2048:
                errors.append("VNET_ADDRSPERNET must be between 16 and 2048, inclusive.")

        except ValueError, e:
            errors.append("VNET_ADDRSPERNET must be an integer power of two")

        if len(errors):
            check.update({ "failed": 1,
                           "error": "\n".join(errors),
                           "resolution": "Set VNET_ADDRSPERNET to a legal value" })

    subchecks['VNET_ADDRSPERNET'] = check

# VNET_DNS
if 'CC' in roles and cf['VNET_MODE'] != "SYSTEM":
    check = { "failed": 0 }
    if not cf.get('VNET_DNS'):
        check.update({ "failed": 1,
                       "error": "VNET_DNS is required for %s mode" % cf['VNET_MODE'],
                       "resolution": "Define VNET_DNS" })
    else:
        errors = []
        validIP = False
        try:
            iputils.sanityCheckIPString(cf['VNET_DNS'])
            validIP = True
        except iputils.IPError, e:
            errors.extend(e.args)
        except iputils.IPMissing, e:
            errors.extend(e.args)

        if validIP:
            po = subprocess.Popen(["dig", "@" + cf['VNET_DNS'],
                                   "+nocomments", "+nocmd", "+aaonly",
                                   "eucalyptus.com" ], stdout=subprocess.PIPE)
            stdout = po.communicate()[0]
            # TODO: check the output?
            if po.returncode:
                errors.append("Failed testing DNS lookup against %s" % cf['VNET_DNS'])

        if errors:
            check.update({ "failed": 1,
                           "error": "\n".join(errors),
                           "resolution": "Set VNET_DNS to a valid DNS server" })
    subchecks['VNET_DNS'] = check

# VNET_BROADCAST
if 'CC' in roles and cf['VNET_MODE'] == "STATIC":
    check = { "failed": 0 }
    if not cf.get('VNET_BROADCAST'):
        check.update({ "failed": 1,
                       "error": "VNET_BROADCAST is required for %s mode" % cf['VNET_MODE'],
                       "resolution": "Define VNET_BROADCAST" })
    else:
        errors = []
        validIP = False
        try:
            iputils.sanityCheckIPString(cf['VNET_BROADCAST'])
            validIP = True
        except iputils.IPError, e:
            errors.extend(e.args)
        except iputils.IPMissing, e:
            errors.extend(e.args)

        if errors:
            check.update({ "failed": 1,
                           "error": "\n".join(errors),
                           "resolution": "Set VNET_BROADCAST to a valid IP" })
    subchecks['VNET_BROADCAST'] = check


# VNET_ROUTER
if 'CC' in roles and cf['VNET_MODE'] == "STATIC":
    check = { "failed": 0 }
    if not cf.get('VNET_ROUTER'):
        check.update({ "failed": 1,
                       "error": "VNET_ROUTER is required for %s mode" % cf['VNET_MODE'],
                       "resolution": "Define VNET_ROUTER" })
    else:
        errors = []
        validIP = False
        try:
            iputils.sanityCheckIPString(cf['VNET_ROUTER'])
            validIP = True
        except iputils.IPError, e:
            errors.extend(e.args)
        except iputils.IPMissing, e:
            errors.extend(e.args)

        if errors:
            check.update({ "failed": 1,
                           "error": "\n".join(errors),
                           "resolution": "Set VNET_ROUTER to a valid IP" })
    subchecks['VNET_ROUTER'] = check

# VNET_LOCALIP
# TODO

# VNET_DHCPDAEMON
if 'CC' in roles and cf['VNET_MODE'] != 'SYSTEM':
    check = { "failed": 0 }
    if not cf.get('VNET_DHCPDAEMON'):
        check.update({ "failed": 1,
                       "error": "VNET_DHCPDAEMON is required for %s mode" % cf['VNET_MODE'],
                       "resolution": "Define VNET_DHCPDAEMON" })
    elif not os.path.exists(cf['VNET_DHCPDAEMON']):
        check.update({ "failed": 1,
                       "error": "VNET_DHCPDAEMON %s does not exist",
                       "resolution": "Install the package containing %s"
                                     "or correct the VNET_DHCPDAEMON setting" })
    elif not os.access(cf['VNET_DHCPDAEMON'], os.X_OK):
        check.update({ "failed": 1,
                       "error": "VNET_DHCPDAEMON %s is not executable" % cf['VNET_DHCPDAEMON'],
                       "resolution": "chmod +x %s" % cf['VNET_DHCPDAEMON'] })
    subchecks['VNET_DHCPDAEMON'] = check

# VNET_DHCPUSER
if 'CC' in roles and cf['VNET_MODE'] != 'SYSTEM':
    check = { "failed": 0 }
    user = cf.get('VNET_DHCPUSER', 'dhcpd')
    try:
        pwd.getpwnam(user)
    except KeyError:
        check.update({ "failed": 1,
                       "error": "VNET_DHCPUSER %s does not exist" % user,
                       "resolution": "Create the user %s or set VNET_DHCPUSER to a valid user" % user })
    # TODO:  Other exceptions?  LDAP failures, etc.?
    subchecks['VNET_DHCPUSER'] = check


print json.dumps(subchecks)
