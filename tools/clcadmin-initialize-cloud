#!/usr/bin/python2 -tt
#
# Copyright 2015-2016 Ent. Services Development Corporation LP
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the
# following conditions are met:
#
#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer
#   in the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import argparse
import os
import os.path
import pwd
import selinux
import shlex
import subprocess
import sys

CONF_PATH = 'etc/eucalyptus/eucalyptus.conf'
CLC_EXE_PATH = 'usr/sbin/eucalyptus-cloud'
CLC_SELINUX_CONTEXT = 'system_u:system_r:eucalyptus_cloud_t:s0'
CLC_USER = 'eucalyptus'

def get_cloud_opts():
    cloud_opts = []
    confpath = os.path.join(os.getenv('EUCALYPTUS') or '/', CONF_PATH)
    try:
        with open(confpath) as conf:
            for line in conf:
                if line.startswith('CLOUD_OPTS='):
                    cloud_opts = line.split('=', 1)[1].strip()
                    if cloud_opts.startswith('"'):
                        cloud_opts = shlex.split(cloud_opts)[0]
                    cloud_opts = shlex.split(cloud_opts)
    except IOError as err:
        sys.exit('{0}: cannot access {1}: {2}'.format(
            os.path.basename(sys.argv[0]), err.filename, err.strerror))
    return cloud_opts

def user(user_name):
    pwentry = pwd.getpwnam(user_name)
    def set_user_group():
        os.setgid(pwentry.pw_gid)
        os.setuid(pwentry.pw_uid)
    return set_user_group

def initialize_cloud(opts):
    exepath = os.path.join(os.getenv('EUCALYPTUS') or '/', CLC_EXE_PATH)
    if not os.path.isfile(exepath):
        sys.exit('{0}: {1} does not exist'.format(
            os.path.basename(sys.argv[0]), exepath))
    if selinux.is_selinux_enabled():
        try:
            selinux.setexeccon(CLC_SELINUX_CONTEXT)
        except OSError:
            print ('{0}: notice: selinux is enabled, but eucalyptus '
                   'policy does not appear to be loaded.  '
                   'Initialization will proceed without selinux '
                   'support.').format(os.path.basename(sys.argv[0]))
    try:
        subprocess.check_call([exepath, '--initialize'] + opts, preexec_fn=user(CLC_USER))
    except subprocess.CalledProcessError:
        sys.exit('{0}: cloud initialization failed'.format(sys.argv[0]))
    finally:
        if selinux.is_selinux_enabled():
            selinux.setexeccon(None)


def main():
    parser = argparse.ArgumentParser(
        add_help=False,
        description=('Create a new cloud on this system.  This can '
                     'take several minutes.\n\nAny unrecognized options '
                     'passed to this program are passed on to '
                     'eucalyptus-cloud.'))
    parser.add_argument('--help', action='help',
                        help='show this help message and exit')
    parser.add_argument('--ignore-cloud-opts', action='store_true',
                        help='ignore the CLOUD_OPTS option in eucalyptus.conf')
    args, forwarded_args = parser.parse_known_args()
    if args.ignore_cloud_opts:
        cloud_opts = []
    else:
        cloud_opts = get_cloud_opts()
    initialize_cloud(cloud_opts + forwarded_args)


if __name__ == '__main__':
    main()
