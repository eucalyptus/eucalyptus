#!/usr/bin/python2

# Copyright 2009-2014 Ent. Services Development Corporation LP
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the
# following conditions are met:
#
#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer
#   in the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# main
import json
import os
import random
import shutil
import subprocess
import tempfile
import urllib2
import time
import argparse
import sys
from eucatoolkit.stages.downloadimage import DownloadImage

TOTAL_RETRIES=40 # download is retried in case of connection problems (2.5hrs+)
FIRST_TIMEOUT=4  # in seconds, goes in powers of two afterwards
MAX_TIMEOUT=300  # in seconds, the cap for growing timeout values

class WF_InsufficientArguments(RuntimeError):
    pass

class WF_InsufficientDependencies(RuntimeError):
    pass

class WF_ManifestError(IOError):
    pass

class WF_InvalidInputPath(Exception):
    pass

# base workflow class

class WF_base():
    def __init__(self):
        self.id = 'unset'
        self.problems = [] # list of problems (implying workflow is not usable)
        self.description = self.__doc__

    def add_arguments(self, name, subparsers):
        pass

    def check_deps(self, args):
        pass

    def execute(self, args):
        self.check_deps(args)
        if len(self.problems) > 0:
            raise WF_InsufficientDependencies(self.problems)
        if hasattr(args, 'pid_path') and args.pid_path is not None:
            f = open(args.pid_path, 'w+')
            f.write(str(os.getpid()))
            f.close()

# specific workflows, one per class

class Euca2ools(object):
    DEFAULT_UPLOAD_ACL = "aws-exec-read" # default canned ACL on AWS for policy-based uploads
    BUNDLE_INSTANCE_ACL = "ec2-bundle-read" # the canned ACL on AWS required for bundle-instance

    def __init__(self):
        self.debug = True

    def bundle_and_upload(self,
                          destination_dir,
                          args,
                          acl=DEFAULT_UPLOAD_ACL,
                          image_path=None,
                          fd_r=None):
        op_args = [PATHS['euca-bundle-and-upload-image'],
                   '--image', image_path if image_path is not None else '-',
                   '--no-progress',
                   '--destination', destination_dir,
                   '--acl', acl,
                   '--prefix', args.prefix,
                   '--arch', args.arch,
                   '--user', args.account,
                   '--access-key-id', args.access_key,
                   '--url', args.object_store_url,
                   '--bucket', args.bucket,
                   '--privatekey', args.signing_key_path,
                   '--cert', args.encryption_cert_path,
                   '--ec2cert', args.encryption_cert_path]
        if hasattr(args, 'eki') and args.eki is not None:
            op_args.extend(['--kernel', args.eki])
        if hasattr(args, 'eri') and args.eri is not None:
            op_args.extend(['--ramdisk', args.eri])
        if hasattr(args, 'secret_key') and args.secret_key is not None:
            op_args.extend(['--secret-key', args.secret_key])
        if hasattr(args, 'image_size') and args.image_size is not None:
            op_args.extend(['--image-size', args.image_size])
        if hasattr(args, 'upload_policy') and args.upload_policy is not None:
            policy = args.upload_policy
            policyObject = None
            try:
                policyObject = json.loads(policy) # try parsing as JSON
            except ValueError:
                policy = args.upload_policy.decode('base64', 'strict')
                policyObject = json.loads(policy) # try parsing again, which should work
            op_args.extend(['--upload-policy', policy])
            if policyObject is not None:
              policyConditions = policyObject.get('conditions')
              if policyConditions is not None:
                for policyCondition in policyConditions:
                  if hasattr( policyCondition, 'get' ):
                    policySecurityToken = policyCondition.get('x-amz-security-token')
                    if policySecurityToken is not None:
                      op_args.extend(['--security-token', policySecurityToken])
                      break
        if hasattr(args, 'upload_policy_signature') and args.upload_policy_signature is not None:
            op_args.extend(['--upload-policy-signature', args.upload_policy_signature])
        if (self.debug):
            op_args.extend(['--debug'])
        op_ps = subprocess.Popen(op_args,
                                 stdin=fd_r,
                                 close_fds=True,
                                 bufsize=-1)
        return op_ps

class WF_DownBundle_WriteRaw(WF_base):
    """Downloads a bundle, writes its contents to a file/device"""

    def add_arguments(self, id, subparsers):
        self.id = id
        parser = subparsers.add_parser(id, help='a help')
        _add_down_bundle_args(parser)
        parser.add_argument('--output-path', required=True, metavar='PATH', help="Path to the file or block device to write output into")

    def check_deps(self, args):
        self.problems = _check_euca2ools(self.problems)

    def execute(self, args):
        WF_base.execute(self, args)

        download = DownloadImage(debug=True, manifest=args.image_manifest_url, destination=args.output_path, privatekey=args.decryption_key_path, cloudcert=args.cloud_cert_path)
        download.main()

class WF_DownParts_WriteRaw(WF_base):
    """Downloads a parts, writes its contents to a file/device"""

    def add_arguments(self, id, subparsers):
        self.id = id
        parser = subparsers.add_parser(id, help='a help')
        parser.add_argument('--output-path', required=True, metavar='PATH', help="Path to the file or block device to write output into")
        parser.add_argument('--import-manifest-url', required=True, metavar='URL', help="URL of the download manifest for the import")
        parser.add_argument('--cloud-cert-path', required=True, metavar='URL', help="Path to the cloud certificate")
        parser.add_argument('--skip-size-validation', required=False, help="Skip downloaded size validation", default=False, action='store_true')

    def check_deps(self, args):
        self.problems = _check_euca2ools(self.problems)

    def execute(self, args):
        WF_base.execute(self, args)
        if args.skip_size_validation:
            download = DownloadImage(reportprogress=True, manifest=args.import_manifest_url, destination=args.output_path, cloudcert=args.cloud_cert_path, skipsizevalidation=True)
        else:
            download = DownloadImage(reportprogress=True, manifest=args.import_manifest_url, destination=args.output_path, cloudcert=args.cloud_cert_path)
        download.main()

class WF_ReadRaw_UpBundle(WF_base):
    """Bundles contents of a local file/disk and uploads it to Object Store"""

    def add_arguments(self, id, subparsers):
        self.id = id
        parser = subparsers.add_parser(id, help='a help')
        parser.add_argument('--input-path', required=True, metavar='PATH', help="Path to the file or block device to read from")
        _add_up_bundle_args(parser)
        parser.add_argument('--work-dir', required=True, metavar='PATH', help='Path to the directory where temporary work files are to reside')
        parser.add_argument('--image-size', required=True, help='Size of the bundled image in bytes')

    def check_deps(self, args):
        self.problems = _check_euca2ools(self.problems)
        self.problems = _check_pv(self.problems)

    def execute(self, args):
        WF_base.execute(self, args)

        bundle_dir = tempfile.mkdtemp(dir=args.work_dir, prefix='euca-bundle-')
        euca2ools = Euca2ools()

        try:
            if not os.path.exists(args.input_path):
                raise WF_InvalidInputPath(args.input_path)
            pipe_r, pipe_w = os.pipe()
            fd_r = os.fdopen(pipe_r, 'r')
            fd_w = os.fdopen(pipe_w, 'w')
            count_ps = subprocess.Popen(['pv', '-n', args.input_path], stdout=fd_w,
                                        close_fds=True, stderr=subprocess.PIPE)
            op_ps = euca2ools.bundle_and_upload(
                destination_dir=bundle_dir,
                args=args, # the rest of the arguments are inherited from run-workflow's command-line
                acl=Euca2ools.BUNDLE_INSTANCE_ACL,
                fd_r=fd_r)
            fd_r.close()
            fd_w.close()
            while count_ps.poll() is None and op_ps.poll() is None:
                try:
                    line = count_ps.stderr.readline()
                    if line:
                        line = line.strip()
                        try:
                            print "Source file read: {0}%".format( int(line) )
                            sys.stdout.flush()
                        except:
                            pass
                except:
                    pass
            count_ps.wait()
            op_ps.wait()
            if op_ps.returncode != 0:
                raise subprocess.CalledProcessError(op_ps.returncode, "euca-bundle-and-upload-image")

        finally: # cleanup
            shutil.rmtree(bundle_dir)

# helpers for arguments shared by more than one workflow

def _add_down_bundle_args(parser):
    parser.add_argument('--decryption-key-path', required=True, metavar='PATH',  help="Path to the key for decryption")
    parser.add_argument('--image-manifest-url', required=True, metavar='URL', help="URL of the download manifest for the bundle")
    parser.add_argument('--cloud-cert-path', required=True, metavar='URL', help="Path to the cloud certificate")

def _add_up_bundle_args(parser):
    parser.add_argument('--signing-key-path', required=True, metavar='PATH',  help="Path to the key for signing the manifest")
    parser.add_argument('--encryption-cert-path', required=True, metavar='PATH', help="Path to the certificate to use for encrypting the bundle")
    parser.add_argument('--prefix', required=True, metavar='NAME', help="File name prefix to give the bundle's files")
    parser.add_argument('--bucket', required=True, metavar='NAME', help="Name of the bucket to upload the bundle into")
    parser.add_argument('--arch', required=True, metavar='NAME', help="Architecture of the bundled image (e.g., x86_64)")
    parser.add_argument('--account', required=True, metavar='NAME', help="Eucalyptus user account ID")
    parser.add_argument('--access-key', required=True, metavar='NAME', help="Access Key ID on object storage")
    parser.add_argument('--object-store-url', required=True, metavar='URL', help="URL of the object store endpoint")
    parser.add_argument('--emi', required=True, metavar='NAME', help="EMI of the image being bundled")
    # optional arguments
    parser.add_argument('--eki', required=False, metavar='NAME', help="EKI of the kernel to associate with the EMI, if used")
    parser.add_argument('--eri', required=False, metavar='NAME', help="ERI of the ramdisk to associate with the EMI, if used")
    parser.add_argument('--secret-key', required=False, metavar='NAME', help="The secret string for object store account (or --upload-policy)")
    parser.add_argument('--upload-policy', required=False, metavar='PATH', help="Path to upload policy (or --secret-key)")
    parser.add_argument('--upload-policy-signature', required=False, metavar='PATH', help="Path to upload policy signature (or --secret-key)")
    parser.add_argument('--pid-path', required=False, metavar='PATH', help='Path to process PID')

# checking helpers to detect presence of dependencies

def _check_executable(problems, command, dep_name):
    with open(os.devnull, "w") as fnull:
        try:
            err = subprocess.call(command, stdout=fnull, stderr=fnull)
            if (err != 0):
                raise ReferenceError
        except:
            problems.append(dep_name + ' is missing')


def _check_euca2ools(problems):
    _check_executable(problems, [PATHS['euca-version']], "euca2ools (euca-version)")
    _check_executable(problems, [PATHS['euca-bundle-and-upload-image'], '--help'], "euca2ools (bundle-and-upload-image)")
    return problems

def _check_pv(problems):
    _check_executable(problems, ['pv','-V'], "pv")
    return problems

def _check_bundle_args(problems, args):
    if ((args.eki == None) != (args.eri == None)):
        problems.append("both EKI and ERI must be specified")
    if (not ((args.secret_key == None) != (args.upload_policy == None))):
        problems.append("either --secret-key or --upload-policy must be specified")
    if ((args.upload_policy != None) and (args.upload_policy_signature == None)):
        problems.append("both --upload-policy and --upload-policy-signature must be specified")
    return problems
# other helpers

def _download_image(work_dir, name, url, key):
    dest = os.path.join(work_dir, name)
    download = DownloadImage(reportprogress=True, manifest=url, destination=dest, privatekey=key)
    download.main()
    return dest

# TODO: this logic is similar to retry logic in http.c:http_get_timeout()
# and should be unified
def _wait_for_manifest(image_manifest_url):
    timeout = FIRST_TIMEOUT
    manifest = None
    for retry in range(0, TOTAL_RETRIES):
        try:
            print "checking download manifest at " + image_manifest_url
            manifest = urllib2.urlopen(image_manifest_url)
            break
        except urllib2.HTTPError as detail:
            if detail.code != 404 and detail.code != 408:
                print "error: " + str(detail)
                raise WF_ManifestError
        print "manifest not accessible, will retry in " + \
              str(timeout) + " seconds (retry " + \
              str(retry+1) + " of " + str(TOTAL_RETRIES) + ")"
        time.sleep(timeout + random.random()) # randomize retries within a second
        timeout <<= 1
        if timeout > MAX_TIMEOUT:
            timeout = MAX_TIMEOUT
    if manifest == None:
        raise WF_ManifestError
    return manifest

def _run(op_args):
    op_ps = subprocess.Popen(op_args)
    op_ps.wait()
    if op_ps.returncode != 0:
        raise subprocess.CalledProcessError(op_ps.returncode, op_args[0])

WORKFLOWS = {'down-bundle/write-raw': WF_DownBundle_WriteRaw(),
             'read-raw/up-bundle': WF_ReadRaw_UpBundle(),
             'down-parts/write-raw': WF_DownParts_WriteRaw()}

PATHS = {'euca-version': "euca-version",
         'euca-bundle-and-upload-image': "euca-bundle-and-upload-image",
         'pv': "pv"}

# global arguments, apply to all workflows
parser = argparse.ArgumentParser(prog='euca-run-workflow', description='Run an Imaging Toolkit workflow.')
parser.add_argument('-l', '--list', required=False, help='Lists the available workflows', action="store_true")
subparsers = parser.add_subparsers(dest='name', help='Workflows help')

# let each workflow add its own arguments, all as optional
for name in WORKFLOWS:
    WORKFLOWS[name].add_arguments(name, subparsers)
args = parser.parse_args()

if args.list:
    for name in WORKFLOWS:
        if len(WORKFLOWS[name].problems) == 0:
            print "%30s: %s" % (name, WORKFLOWS[name].description)
    sys.exit(0)

# run the desired workflow
try:
    WORKFLOWS[args.name].execute(args)
except KeyError:
    print "unknown workflow '" + args.name + "'"
    sys.exit(2)
except WF_InsufficientArguments, e:
    print "insufficient arguments for workflow '" + args.name + "'"
except WF_InsufficientDependencies, e:
    print "workflow '" + args.name + "' is unavailable! Problems:"
    for problem in e.args[0]:
        print "\t - " + problem
    sys.exit(3)
except WF_ManifestError:
    print "failed to download components from object store"
    sys.exit(4)
except WF_InvalidInputPath, e:
    print "Invalid file or block device to read from: %s" % e.args[0]
    sys.exit(6)
except subprocess.CalledProcessError, e:
    print "workflow failed (error in subprocess)"
    sys.exit(5)
