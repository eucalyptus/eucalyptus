#!/usr/bin/python2 -tt
#
# Copyright 2015-2016 Ent. Services Development Corporation LP
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the
# following conditions are met:
#
#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer
#   in the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Note that this script is used for both clusteradmin-copy-keys and
# clcadmin-copy-keys because they are nearly identical and meant to
# be self-contained.  Its behavior changes slightly based on the name
# of the executable.  The Makefile thus installs it twice.

import argparse
import os
import shlex
import subprocess
import sys


KEYPATH = 'var/lib/eucalyptus/keys'
PUBLIC_KEYS = ('cloud-cert.pem',)  # These go everywhere
GLOBAL_KEYS = ('euca.p12', 'cloud-pk.pem')
ZONE_KEYS = ('cluster-cert.pem', 'cluster-pk.pem', 'node-cert.pem',
             'node-pk.pem')


IS_CLUSTER = (os.path.basename(sys.argv[0]) == 'clusteradmin-copy-keys')


def add_key_paths(keys, path_map, local_keydir, remote_keydir):
    for key in keys:
        local_keypath = os.path.join(local_keydir, key)
        path_map.setdefault(local_keypath, [])
        path_map[local_keypath].append(os.path.join(remote_keydir, key))


def build_key_path_map(local_keydir, remote_keydir, zone=None):
    path_map = {}
    add_key_paths(PUBLIC_KEYS, path_map, local_keydir, remote_keydir)
    if IS_CLUSTER:
        # CC to NC (zone keys, keydir -> keydir)
        add_key_paths(ZONE_KEYS, path_map, local_keydir, remote_keydir)
    else:
        # CLC to CLC (global keys, keydir -> keydir)
        add_key_paths(GLOBAL_KEYS, path_map, local_keydir, remote_keydir)
    if zone:
        # CLC to CLC (zone keys, keydir/zone -> keydir/zone)
        add_key_paths([zone + '/'], path_map, local_keydir,
                      remote_keydir + '/')
        # CLC to CC  (zone keys, keydir/zone -> keydir)
        add_key_paths(ZONE_KEYS, path_map, os.path.join(local_keydir, zone),
                      remote_keydir)
    return path_map


def copy_keys(desthost, path_map, rsync):
    for srcpath in path_map:
        try:
            if not os.path.isdir(srcpath):
                # It's either a file or nonexistent (the latter raises OSError)
                with open(srcpath):
                    pass
        except OSError as err:
            sys.exit('{0}: cannot access {1}: {2}'.format(
                os.path.basename(sys.argv[0]), err.filename, err.strerror))
    for srcpath, destpaths in path_map.items():
        for destpath in destpaths:
            cmd = shlex.split(rsync) + \
                [srcpath, '{0}:{1}'.format(desthost, destpath)]
            try:
                subprocess.check_call(cmd)
            except subprocess.CalledProcessError as err:
                destdir = os.path.dirname(destpath)
                if err.returncode == 12:
                    # Error in rsync protocol data stream
                    # This is probably caused by a nonexistent dest dir
                    msg = ('{exe}: failed to copy {srcpath} to {desthost}; '
                           'ensure eucalyptus is installed on the target '
                           'host and {destdir} exists')
                else:
                    msg = '{exe}: failed to copy {srcpath} to {desthost}'
                sys.exit(msg.format(exe=os.path.basename(sys.argv[0]),
                                    desthost=desthost, srcpath=srcpath,
                                    destdir=destdir))


def main():
    keydir = os.path.join(os.getenv('EUCALYPTUS') or '/', KEYPATH)
    parser = argparse.ArgumentParser()
    if IS_CLUSTER:
        parser.description = 'Copy cryptographic keys to a node controller.'
    else:
        parser.description = ('Copy cryptographic keys to a eucalyptus-cloud '
                              'service or a cluster controller.  When copying '
                              'keys to a cluster controller, use -z to select '
                              'which availability zone\'s keys to send.')
    parser.add_argument('hosts', metavar='HOST', nargs='+',
                        help='the host to copy keys to (required)')
    if IS_CLUSTER:
        parser.add_argument('-z', '--availability-zone', metavar='ZONE',
                            help=argparse.SUPPRESS)
    else:
        parser.add_argument('-z', '--availability-zone', metavar='ZONE',
                            help=('also copy the keys for the given '
                                  'availability zone'))
    parser.add_argument('--local-keydir', default=keydir, metavar='DIR',
                        help=('the directory on this machine to copy '
                              'keys from (default: {0})'.format(keydir)))
    parser.add_argument('--remote-keydir', default=keydir, metavar='DIR',
                        help=('the directory on the remote machine to copy '
                              'keys to (default: {0})'.format(keydir)))
    parser.add_argument('--rsync', default='rsync -a', metavar='CMD',
                        help=('rsync command to copy key files '
                              '(default: "rsync -a")'))
    args = parser.parse_args()
    path_map = build_key_path_map(args.local_keydir, args.remote_keydir,
                                  zone=getattr(args, 'availability_zone', None))
    for host in args.hosts:
        copy_keys(host, path_map, args.rsync)


if __name__ == '__main__':
    main()
